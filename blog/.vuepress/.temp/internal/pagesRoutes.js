export const pagesRoutes = [
  ["v-79fdd481","/home.html",{"title":"项目主页","icon":"home","type":"home","readingTime":{"minutes":2.59,"words":776},"excerpt":"这是项目主页的案例。你可以在这里放置你的主体内容。 想要使用此布局，你需要在页面 front matter 中设置 home: true。 配置项的相关说明详见 项目主页配置。"},["/home","/home.md"]],
  ["v-8daa1a0e","/",{"title":"主页","icon":"home","type":"home","readingTime":{"minutes":0.66,"words":198},"excerpt":""},["/index.html","/README.md"]],
  ["v-2e3eac9e","/slides.html",{"title":"幻灯片页","icon":"slides","type":"slide","readingTime":{"minutes":4.51,"words":1352},"excerpt":"@slidestart 幻灯片演示 一个简单的幻灯片演示与各种小贴士。\r\" 作者 Mr.Hope. 请滚动鼠标滚轮进入下一页\" --- 标注幻灯片 👇 -- 标注幻灯片 使用 --- 标注水平幻灯片 在水平幻灯片中使用 -- 分割垂直幻灯片 使用 `` 在幻灯片上添加属性 使用 `` 在前一个 HTML 元素上添加属性 --- Markdown 你可以在幻"},["/slides","/slides.md"]],
  ["v-4c863446","/guide/disable.html",{"title":"布局与功能禁用","icon":"config","type":"article","readingTime":{"minutes":0.42,"words":127},"excerpt":"<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>\n","category":["使用指南"],"tag":["禁用"]},["/guide/disable","/guide/disable.md"]],
  ["v-bf720700","/guide/encrypt.html",{"title":"密码加密的文章","icon":"lock","type":"article","readingTime":{"minutes":0.52,"words":156},"excerpt":"","category":["使用指南"],"tag":["文章加密"],"isEncrypted":true},["/guide/encrypt","/guide/encrypt.md"]],
  ["v-0978b044","/guide/markdown.html",{"title":"Markdown 展示","icon":"markdown","type":"article","readingTime":{"minutes":4.09,"words":1226},"excerpt":"<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>\n<p>你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>\n","category":["使用指南"],"tag":["Markdown"]},["/guide/markdown","/guide/markdown.md"]],
  ["v-4eaf9f84","/guide/page.html",{"title":"页面配置","icon":"page","type":"article","readingTime":{"minutes":1.58,"words":475},"excerpt":"<p><code v-pre>more</code> 注释之前的内容被视为文章摘要。</p>\n","author":"Igarashi","date":"2020-09-16T00:00:00.000Z","localizedDate":"2020年9月16日","category":["使用指南"],"tag":["页面配置","使用指南"],"sticky":true,"star":true},["/guide/page","/guide/page.md"]],
  ["v-fffb8e28","/guide/",{"title":"主要功能与配置演示","icon":"creative","type":"article","readingTime":{"minutes":0.13,"words":40},"excerpt":"目录\rMarkdown 展示; \r页面展示; \r禁用展示; \r加密展示;","category":["使用指南"]},["/guide/index.html","/guide/README.md"]],
  ["v-5a814a99","/posts/article10.html",{"title":"文章 10","icon":"edit","type":"article","readingTime":{"minutes":0.11,"words":33},"excerpt":"文章 10 标题 2 这里是内容。 标题 3 这里是内容。","date":"2022-01-10T00:00:00.000Z","localizedDate":"2022年1月10日","category":["CategoryA","CategoryB"],"tag":["tag A","tag B"]},["/posts/article10","/posts/article10.md"]],
  ["v-5c362338","/posts/article11.html",{"title":"文章 11","icon":"edit","type":"article","readingTime":{"minutes":0.11,"words":33},"excerpt":"文章 11 标题 2 这里是内容。 标题 3 这里是内容。","date":"2022-01-11T00:00:00.000Z","localizedDate":"2022年1月11日","category":["CategoryA","CategoryB"],"tag":["tag A","tag B"]},["/posts/article11","/posts/article11.md"]],
  ["v-5deafbd7","/posts/article12.html",{"title":"文章 12","icon":"edit","type":"article","readingTime":{"minutes":0.12,"words":35},"excerpt":"文章 12 标题 2 这里是内容。 标题 3 这里是内容。","date":"2022-01-12T00:00:00.000Z","localizedDate":"2022年1月12日","category":["CategoryA","CategoryB"],"tag":["tag A","tag B"],"star":true},["/posts/article12","/posts/article12.md"]],
  ["v-7beb5be1","/posts/article9.html",{"title":"文章 9","icon":"edit","type":"article","readingTime":{"minutes":0.11,"words":33},"excerpt":"文章 9 标题 2 这里是内容。 标题 3 这里是内容。","date":"2022-01-09T00:00:00.000Z","localizedDate":"2022年1月9日","category":["CategoryA","CategoryB"],"tag":["tag A","tag B"]},["/posts/article9","/posts/article9.md"]],
  ["v-63cd5dba","/python/",{"title":"Python","icon":"creative","type":"article","readingTime":{"minutes":0.11,"words":32},"excerpt":"目录\rMarkdown 展示; \r页面展示; \r禁用展示; \r加密展示;","category":["使用指南"]},["/python/index.html","/python/README.md"]],
  ["v-03842690","/posts/article/article1.html",{"title":"文章 1","icon":"edit","type":"article","readingTime":{"minutes":0.11,"words":32},"excerpt":"文章 1 标题 2 这里是内容。 标题 3 这里是内容。","date":"2022-01-01T00:00:00.000Z","localizedDate":"2022年1月1日","category":["CategoryA"],"tag":["tag A","tag B"]},["/posts/article/article1","/posts/article/article1.md"]],
  ["v-0538ff2f","/posts/article/article2.html",{"title":"文章 2","icon":"edit","type":"article","readingTime":{"minutes":0.11,"words":34},"excerpt":"文章 2 标题 2 这里是内容。 标题 3 这里是内容。","date":"2022-01-02T00:00:00.000Z","localizedDate":"2022年1月2日","category":["CategoryA"],"tag":["tag A","tag B"],"star":true},["/posts/article/article2","/posts/article/article2.md"]],
  ["v-06edd7ce","/posts/article/article3.html",{"title":"文章 3","icon":"edit","type":"article","readingTime":{"minutes":0.11,"words":33},"excerpt":"文章 3 标题 2 这里是内容。 标题 3 这里是内容。","date":"2022-01-03T00:00:00.000Z","localizedDate":"2022年1月3日","category":["CategoryA","CategoryB"],"tag":["tag A","tag B"]},["/posts/article/article3","/posts/article/article3.md"]],
  ["v-08a2b06d","/posts/article/article4.html",{"title":"文章 4","icon":"edit","type":"article","readingTime":{"minutes":0.11,"words":33},"excerpt":"文章 4 标题 2 这里是内容。 标题 3 这里是内容。","date":"2022-01-04T00:00:00.000Z","localizedDate":"2022年1月4日","category":["CategoryA","CategoryB"],"tag":["tag A","tag B"]},["/posts/article/article4","/posts/article/article4.md"]],
  ["v-0a57890c","/posts/article/article5.html",{"title":"文章 5","icon":"edit","type":"article","readingTime":{"minutes":0.11,"words":33},"excerpt":"文章 5 标题 2 这里是内容。 标题 3 这里是内容。","date":"2022-01-05T00:00:00.000Z","localizedDate":"2022年1月5日","category":["CategoryA","CategoryB"],"tag":["tag A","tag B"]},["/posts/article/article5","/posts/article/article5.md"]],
  ["v-0c0c61ab","/posts/article/article6.html",{"title":"文章 6","icon":"edit","type":"article","readingTime":{"minutes":0.12,"words":35},"excerpt":"文章 6 标题 2 这里是内容。 标题 3 这里是内容。","date":"2022-01-06T00:00:00.000Z","localizedDate":"2022年1月6日","category":["CategoryA","CategoryB"],"tag":["tag A","tag B"],"star":10},["/posts/article/article6","/posts/article/article6.md"]],
  ["v-0dc13a4a","/posts/article/article7.html",{"title":"文章 7","icon":"edit","type":"article","readingTime":{"minutes":0.11,"words":33},"excerpt":"文章 7 标题 2 这里是内容。 标题 3 这里是内容。","date":"2022-01-07T00:00:00.000Z","localizedDate":"2022年1月7日","category":["CategoryA","CategoryB"],"tag":["tag A","tag B"]},["/posts/article/article7","/posts/article/article7.md"]],
  ["v-0f7612e9","/posts/article/article8.html",{"title":"文章 8","icon":"edit","type":"article","readingTime":{"minutes":0.11,"words":33},"excerpt":"文章 8 标题 2 这里是内容。 标题 3 这里是内容。","date":"2022-01-08T00:00:00.000Z","localizedDate":"2022年1月8日","category":["CategoryA","CategoryB"],"tag":["tag A","tag B"]},["/posts/article/article8","/posts/article/article8.md"]],
  ["v-14ab607e","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%85%B6%E4%BB%96%E5%B0%8F%E6%A8%A1%E5%9D%97.html",{"title":"其他小模块","type":"article","readingTime":{"minutes":2.13,"words":638},"excerpt":"random 模块 当需要创建随机数时使用 .random()限定了0-1的浮点数 .randint(int范围)传入整数左右都包括 .choice(str/list...)可以拿出字符串、列表、元组等等的随机目标 .shuffle() .sample(序列,指定返回元素个数)可以从一个序列里面随机出指定个数个元素组成新的序列返回(同样是列表比起choice"},["/python/库/标准库基础/其他小模块.html","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%85%B6%E4%BB%96%E5%B0%8F%E6%A8%A1%E5%9D%97","/python/库/标准库基础/其他小模块.md","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%85%B6%E4%BB%96%E5%B0%8F%E6%A8%A1%E5%9D%97.md"]],
  ["v-e0b3af62","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%BA%8F%E5%88%97%E5%8C%96.html",{"title":"序列化","type":"article","readingTime":{"minutes":6.4,"words":1921},"excerpt":"序列化 之前我们学习过用eval内置方法可以将一个字符串转成python对象，不过，eval方法是有局限性的，对于普通的数据类型， json.loads和eval都能用，但遇到特殊类型的时候，eval就不管用了,所以eval的重点还是通常用来执行一个字符串表达式，并返回表达式的值。 什么是序列化: 我们把对象(变量)从内存中变成可存储或传输的过程称之为序列化"},["/python/库/标准库基础/序列化.html","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%BA%8F%E5%88%97%E5%8C%96","/python/库/标准库基础/序列化.md","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E5%BA%8F%E5%88%97%E5%8C%96.md"]],
  ["v-def64196","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86.html",{"title":"文本处理","type":"article","readingTime":{"minutes":4.57,"words":1371},"excerpt":"文本处理 文档参考 1. re 正则表达式 正则表达式都是 贪婪 的! 1.1 re 模块嵌入Python 的编程语言，re 模块使该模式被编译成一系列字节码，然后由用 C 编写的匹配引擎执行，比原生慢些，但容易写。 可模糊匹配 Unicode 字符串（str）、8 位字节串（bytes），但 str 和 bytes 不能混用 .findall(patter"},["/python/库/标准库基础/文本处理.html","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86","/python/库/标准库基础/文本处理.md","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86.md"]],
  ["v-17dde8b0","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%97%A5%E5%BF%97.html",{"title":"日志","type":"article","readingTime":{"minutes":3.97,"words":1190},"excerpt":"logging 日志模块 1.basicConfig 的基本使用： 利用 basicConfig 配置日志 import logging logging.basicConfig(level = logging.INFO,format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s') logge"},["/python/库/标准库基础/日志.html","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%97%A5%E5%BF%97","/python/库/标准库基础/日志.md","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%97%A5%E5%BF%97.md"]],
  ["v-42b20cec","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%97%B6%E9%97%B4.html",{"title":"时间","type":"article","readingTime":{"minutes":2.85,"words":856},"excerpt":"time 模块： 时间相关的操作，时间有三种表示方式：\r时间戳 : 多少多少秒; \r格式化的字符串: 2014-11-11 11:11; \r结构化时间 struct_time: 元组包含了：年、日、星期等...; time.time\r返回值:; \rint ：从Unix诞生日 1970 年 1 月 1 日之后的秒; \r示例：; time.ctime\r返回值:;"},["/python/库/标准库基础/时间.html","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%97%B6%E9%97%B4","/python/库/标准库基础/时间.md","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E6%97%B6%E9%97%B4.md"]],
  ["v-1aeb4028","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3.html",{"title":"系统相关","type":"article","readingTime":{"minutes":14.62,"words":4386},"excerpt":"系统库 1. os 模块 os 文档 该模块包含了与系统交互的命令 ！！！禁止使用 os模块 执行 rm -rf /  命令 1.1 路径相关\r获取系统当前所在路径; \r列出 path 下的所有文件; \r返回 path 的绝对路径; \r分割 path 的文件夹与文件名; \r返回 path 的文件名; \r拼接多个 path; \r判断 path 是否存在; 判断"},["/python/库/标准库基础/系统相关.html","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3","/python/库/标准库基础/系统相关.md","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E5%9F%BA%E7%A1%80/%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3.md"]],
  ["v-006b412e","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/SMTP%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6.html",{"title":"smtplib-邮件","type":"article","readingTime":{"minutes":4.89,"words":1467},"excerpt":"SMTP 发送邮件: SMTP 是发送邮件的协议，Python 内置对 SMTP 的支持，可以发送纯文本邮件、HTML 邮件以及带附件的邮件。 Python 对 SMTP 支持有 smtplib 和 email 两个模块，email 负责构造邮件，smtplib 负责发送邮件。 一、构造邮件： 示例代码： 以下执行实例需要你本机已安装了支持 SMTP 的服务"},["/python/库/标准库进阶/SMTP发送邮件.html","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/SMTP%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6","/python/库/标准库进阶/SMTP发送邮件.md","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/SMTP%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6.md"]],
  ["v-7ade9f26","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E5%85%B6%E4%BB%96%E6%A8%A1%E5%9D%97.html",{"title":"其他模块","type":"article","readingTime":{"minutes":0.82,"words":246},"excerpt":"其他不常用模块 importlib import 的实现 importlib支持传入字符来引入一个模块，若模块不存在则捕获异常ImportError 1、动态引入： module = importlib.importmodule(modulestr) #通过传入字符串来引入模块并赋值，之后即可调用 2、检查引入模块是否存在： import importlib"},["/python/库/标准库进阶/其他模块.html","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E5%85%B6%E4%BB%96%E6%A8%A1%E5%9D%97","/python/库/标准库进阶/其他模块.md","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E5%85%B6%E4%BB%96%E6%A8%A1%E5%9D%97.md"]],
  ["v-5921e965","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.html",{"title":"函数式编程","type":"article","readingTime":{"minutes":8.9,"words":2669},"excerpt":"函数式编程模块 1. functools 高阶函数 和 可调用对象 上的操作 1.1 partial 偏函数:即柯里化 当函数的参数个数太多的时候，可以通过使用functools.partial来创建一个新的函数来简化逻辑从而增强代码的可读性 实现原理：（内部的简单闭包） def partial(func, args, *kwargs): def newfu"},["/python/库/标准库进阶/函数式编程.html","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B","/python/库/标准库进阶/函数式编程.md","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B.md"]],
  ["v-7e22fecf","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E5%9B%BD%E9%99%85%E5%8C%96.html",{"title":"gettext-国际化","type":"article","readingTime":{"minutes":2.02,"words":607},"excerpt":"gettext 用于处理国际化、类 i18n、本地化，Localization，可以将一套语言处理转化为不同语言 一、创建步骤 1.先建立源代码文件，用于安装和转义 创建文件 - 文件名：translate.py import gettext import os BASEDIR = os.path.dirname(os.path.dirname(os.pat"},["/python/库/标准库进阶/国际化.html","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E5%9B%BD%E9%99%85%E5%8C%96","/python/库/标准库进阶/国际化.md","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E5%9B%BD%E9%99%85%E5%8C%96.md"]],
  ["v-1b718f33","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{"title":"数据类型","type":"article","readingTime":{"minutes":8.16,"words":2448},"excerpt":"数据类型 Enum 枚举 建立一组常量时使用，枚举成员可比较，自身可迭代 模块内容 模块定义了 4 个枚举类: [ Enum, IntEnum, Flag, IntFlag ]、一个辅助类 auto，一个装饰器 unique() 1. ##### enum.Enum 创建枚举常量的基类 2. ##### enum.IntEnum 创建 int子类枚举常量的基"},["/python/库/标准库进阶/数据类型.html","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B","/python/库/标准库进阶/数据类型.md","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.md"]],
  ["v-af26f8c0","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.html",{"title":"文件操作","type":"article","readingTime":{"minutes":2.63,"words":790},"excerpt":"文件操作 pathlib 基本可以代替 os.path 来处理路径。它采用了完全面向对象的编程方式。 --- tempfile 用于创建临时文件和目录，它可以跨平台使用，通常有以下多个接口 https://docs.python.org/zh-cn/3.8/library/tempfile.html 1.TemporaryFile tempfile.Temp"},["/python/库/标准库进阶/文件操作.html","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C","/python/库/标准库进阶/文件操作.md","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.md"]],
  ["v-571a3b26","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9C%8D%E5%8A%A1.html",{"title":"运行时服务","type":"article","readingTime":{"minutes":3.25,"words":975},"excerpt":"运行时服务 abc 抽象基类 ### atexit： 退出处理器, 在程序即将结束之前执行 的代码 使用register函数用于注册程序退出时的回调函数，然后在回调函数中做一些资源清理的操作 内部是通过sys.exitfunc来实现的，它先把注册的回调函数放到一个列表中，当程序退出时，按先进后出的顺序调用注册的回调。 如果回调函数在执行过程中抛出了异常，at"},["/python/库/标准库进阶/运行时服务.html","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9C%8D%E5%8A%A1","/python/库/标准库进阶/运行时服务.md","/python/%E5%BA%93/%E6%A0%87%E5%87%86%E5%BA%93%E8%BF%9B%E9%98%B6/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9C%8D%E5%8A%A1.md"]],
  ["v-aea22a4a","/python/%E5%BA%93/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BC%80%E6%BA%90%E5%8C%85/arrow%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F.html",{"title":"arrow","type":"article","readingTime":{"minutes":2.07,"words":622},"excerpt":"arrow Python 最好用的时间日期处理库 一、初识： 安装： pip install arrow 初步使用： import arrow 导入 arrow.utcnow() 获取utc时间 arrow.now() 获取local时间 最终获取的是一个 Arrow时间对象，通过这个对象我们可以做各种时间转换 二、时间转换： now = arrow.now"},["/python/库/第三方开源包/arrow时间日期.html","/python/%E5%BA%93/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BC%80%E6%BA%90%E5%8C%85/arrow%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F","/python/库/第三方开源包/arrow时间日期.md","/python/%E5%BA%93/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BC%80%E6%BA%90%E5%8C%85/arrow%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F.md"]],
  ["v-29b93e8a","/python/%E5%BA%93/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BC%80%E6%BA%90%E5%8C%85/Psutil.html",{"title":"psutil","type":"article","readingTime":{"minutes":2.21,"words":663},"excerpt":"psutil 日常处理运维相关，psutil = process and system utilities 不仅可以通过一两行代码实现系统监控，还可以跨平台使用 https://psutil.readthedocs.io/ 安装 psutil pip install psutil import psutil 一、CPU 相关： 1. 获取 CPU 信息： C"},["/python/库/第三方开源包/Psutil.html","/python/%E5%BA%93/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BC%80%E6%BA%90%E5%8C%85/Psutil","/python/库/第三方开源包/Psutil.md","/python/%E5%BA%93/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BC%80%E6%BA%90%E5%8C%85/Psutil.md"]],
  ["v-69b1630f","/python/%E6%A1%86%E6%9E%B6/FastAPI/FastAPI%E5%9F%BA%E7%A1%80.html",{"title":"FastAPI基础","type":"article","readingTime":{"minutes":18.21,"words":5464},"excerpt":"FastAPI FastAPI 文档| GitHub FastAPI 简介 1.特性：\r快速：理论上媲美 nodeJS 和 GO; \r快速编码：效率提升 2~3 倍; \r更少错误：理论减少 40%; \r直观、简易、短、健壮; \r基于标准：完全兼容 API 的开放标准 openAPI & JSON Schema; 2.层次结构 FastAPI 是基于 Star"},["/python/框架/FastAPI/FastAPI基础.html","/python/%E6%A1%86%E6%9E%B6/FastAPI/FastAPI%E5%9F%BA%E7%A1%80","/python/框架/FastAPI/FastAPI基础.md","/python/%E6%A1%86%E6%9E%B6/FastAPI/FastAPI%E5%9F%BA%E7%A1%80.md"]],
  ["v-46440ea3","/python/%E6%A1%86%E6%9E%B6/FastAPI/FastApi%E5%9F%BA%E7%A1%80%E4%BA%8C.html",{"title":"FastAPI基础二","type":"article","readingTime":{"minutes":7.94,"words":2382},"excerpt":"FastAPI 三、Depend 依赖注入系统！ 1.什么是依赖注入： 即是在你编程的代码前（路径函数），有一种方法，可以声明它执行前或是工作中需要使用的东西，比如：\r有共享逻辑（一次又一次地使用相同的代码逻辑）。; \r共享数据库连接。; \r强制执行安全性，身份验证，角色要求; \r等等很多其他事情; 所有注入依赖项，可以最大程度地减少了代码重复。 2.最基本"},["/python/框架/FastAPI/FastApi基础二.html","/python/%E6%A1%86%E6%9E%B6/FastAPI/FastApi%E5%9F%BA%E7%A1%80%E4%BA%8C","/python/框架/FastAPI/FastApi基础二.md","/python/%E6%A1%86%E6%9E%B6/FastAPI/FastApi%E5%9F%BA%E7%A1%80%E4%BA%8C.md"]],
  ["v-3f56a36f","/python/%E6%A1%86%E6%9E%B6/FastAPI/FastAPI%E8%B8%A9%E5%9D%91%E9%9B%86%E5%90%88.html",{"title":"FastAPI 踩坑记录","type":"article","readingTime":{"minutes":1.57,"words":471},"excerpt":"FastAPI 踩坑记录 OpenApi FastAPI 默认通过 CDN 的 swagger.js 文件，生成对应 openapi 文档（植入） 若文档出现无法使用，如：变为 default ，且点不开情况，可能是 FastAPI 版本升级，更新了 CDN 上面的 swagger.js\r下载特定版本，本地静态加载 swagger.js; \r一直使用最新的 "},["/python/框架/FastAPI/FastAPI踩坑集合.html","/python/%E6%A1%86%E6%9E%B6/FastAPI/FastAPI%E8%B8%A9%E5%9D%91%E9%9B%86%E5%90%88","/python/框架/FastAPI/FastAPI踩坑集合.md","/python/%E6%A1%86%E6%9E%B6/FastAPI/FastAPI%E8%B8%A9%E5%9D%91%E9%9B%86%E5%90%88.md"]],
  ["v-321e6bd9","/python/%E6%A1%86%E6%9E%B6/FastAPI/FastAPI%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8.html",{"title":"FastAPI进阶","type":"article","readingTime":{"minutes":2.56,"words":767},"excerpt":"FastApi | 进阶使用 一、websocket https://www.starlette.io/websockets/ https://www.starlette.io/endpoints/#websocketendpoint 1.websocket 基本使用： ####（1）前端创建 websocket 首先前端需要建立一个 websocket 连"},["/python/框架/FastAPI/FastAPI进阶使用.html","/python/%E6%A1%86%E6%9E%B6/FastAPI/FastAPI%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8","/python/框架/FastAPI/FastAPI进阶使用.md","/python/%E6%A1%86%E6%9E%B6/FastAPI/FastAPI%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8.md"]],
  ["v-4878e166","/python/%E6%A1%86%E6%9E%B6/Django/DjangoCBV&%E5%88%86%E9%A1%B5.html",{"title":"Django进阶二","type":"article","readingTime":{"minutes":12.05,"words":3615},"excerpt":"Django 之 CBV & FBV： url——>def 函数： FBV（F 指代 function，B：Base V：views 依赖于视图） url——>class 类： CBV（C 指代 classs） 一、CBV:（CBV 和 FBV 并无本质区别，想用哪个用哪个） 当利用 CBV 模式时： 1.先要导入 from django import vi"},["/python/框架/Django/DjangoCBV&分页.html","/python/%E6%A1%86%E6%9E%B6/Django/DjangoCBV&%E5%88%86%E9%A1%B5","/python/框架/Django/DjangoCBV&分页.md","/python/%E6%A1%86%E6%9E%B6/Django/DjangoCBV&%E5%88%86%E9%A1%B5.md"]],
  ["v-3bce65ed","/python/%E6%A1%86%E6%9E%B6/Django/Django%E5%9F%BA%E7%A1%80.html",{"title":"Django 基础","type":"article","readingTime":{"minutes":0.58,"words":175},"excerpt":"Django 基础 1. 执行流程 1.1 生命周期 Django 未封装 socket，使用第三方 Server 因此 Server 必须提供 socket\r处理/解析请求; \r解析结果给 Django; \r等待 Django 返回结果; \r将返回结果发送到客户端; 在将解析结果给 Django 时，Django 会内部执行中间件 1.2 中间件 sett"},["/python/框架/Django/Django基础.html","/python/%E6%A1%86%E6%9E%B6/Django/Django%E5%9F%BA%E7%A1%80","/python/框架/Django/Django基础.md","/python/%E6%A1%86%E6%9E%B6/Django/Django%E5%9F%BA%E7%A1%80.md"]],
  ["v-e0b635c4","/python/%E6%A1%86%E6%9E%B6/Django/Django%E6%A6%82%E8%BF%B0.html",{"title":"Django概述","type":"article","readingTime":{"minutes":4.99,"words":1497},"excerpt":"Django 文档 操作指南 Github 1. 初始化 1.1 安装 安装 Django 框架 1.2 创建项目\r\" 一个网站 配置 和 应用 的集合\"\rdjango-admin.py：用于管理任务的 CLI 工具; 其目录结构如下 uci 项目工程目录 init.py asgi.py 兼容 ASGI 服务器的入口 settings.py Django的配"},["/python/框架/Django/Django概述.html","/python/%E6%A1%86%E6%9E%B6/Django/Django%E6%A6%82%E8%BF%B0","/python/框架/Django/Django概述.md","/python/%E6%A1%86%E6%9E%B6/Django/Django%E6%A6%82%E8%BF%B0.md"]],
  ["v-80185c76","/python/%E6%A1%86%E6%9E%B6/Django/Model%E5%B1%82&ORM.html",{"title":"Models层","type":"article","readingTime":{"minutes":16.85,"words":5054},"excerpt":"八 Models： 数据库的配置： 1 django默认支持sqlite，mysql, oracle,postgresql数据库。 sqlite django默认使用sqlite的数据库，默认自带sqlite的数据库驱动 , 引擎名称：django.db.backends.sqlite3 mysql 1引擎名称：django.db.backends.mysq"},["/python/框架/Django/Model层&ORM.html","/python/%E6%A1%86%E6%9E%B6/Django/Model%E5%B1%82&ORM","/python/框架/Django/Model层&ORM.md","/python/%E6%A1%86%E6%9E%B6/Django/Model%E5%B1%82&ORM.md"]],
  ["v-aacebef0","/python/%E6%A1%86%E6%9E%B6/Django/ORM%E5%AD%97%E6%AE%B5&%E5%85%B3%E8%81%94.html",{"title":"ORM基础","type":"article","readingTime":{"minutes":9.31,"words":2793},"excerpt":"一、字段： AutoField(Field) - int 自增列，必须填入参数 primary_key=True（注意 MySQL 中只能有一个自增列，因此 Django 中设定必须如此，此时便没有默认的主键自增列了） BigAutoField(AutoField)\rbigint自增列，必须填入参数 primary_key=True; 注：当model中如果"},["/python/框架/Django/ORM字段&关联.html","/python/%E6%A1%86%E6%9E%B6/Django/ORM%E5%AD%97%E6%AE%B5&%E5%85%B3%E8%81%94","/python/框架/Django/ORM字段&关联.md","/python/%E6%A1%86%E6%9E%B6/Django/ORM%E5%AD%97%E6%AE%B5&%E5%85%B3%E8%81%94.md"]],
  ["v-1eccda52","/python/%E6%A1%86%E6%9E%B6/Django/ORM%E6%9F%A5%E8%AF%A2API.html",{"title":"ORM-API","type":"article","readingTime":{"minutes":24.55,"words":7365},"excerpt":"接上文，查找重点： 查（filter，value等)： 查询相关API： filter(**kwargs): 它包含了与所给筛选条件相匹配的对象（理解为Where查询条件）（放的是一组组的键值对如name=\"igarashi\"， 多个参则组成and条件）返回的QuerySet类型 all(): 查询所有结果 之后拿到的是集合对象QuerySet 不用all则"},["/python/框架/Django/ORM查询API.html","/python/%E6%A1%86%E6%9E%B6/Django/ORM%E6%9F%A5%E8%AF%A2API","/python/框架/Django/ORM查询API.md","/python/%E6%A1%86%E6%9E%B6/Django/ORM%E6%9F%A5%E8%AF%A2API.md"]],
  ["v-4e076a19","/python/%E6%A1%86%E6%9E%B6/Tornado/tornado.html",{"title":"Tornado基础","type":"article","readingTime":{"minutes":1.62,"words":485},"excerpt":"Tornado 框架 Tornado | Book 1.简介 1.1 各类框架的比较 Django 和 Flask：传统老牌框架，一个大而全，一个小而精，但并发低 Tornado 性能高，在底层 IO 处理机制上和 Django 有很大区别：\rDjango、Flask则是传统模型，即：IO 阻塞 模型; \r好处是代码容易理解，简单; \rtronado、gev"},["/python/框架/Tornado/tornado.html","/python/%E6%A1%86%E6%9E%B6/Tornado/tornado","/python/框架/Tornado/tornado.md","/python/%E6%A1%86%E6%9E%B6/Tornado/tornado.md"]],
  ["v-16ab7587","/python/%E6%A1%86%E6%9E%B6/%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/Cookie%E5%92%8CSessions.html",{"title":"状态管理","type":"article","readingTime":{"minutes":3.42,"words":1027},"excerpt":"状态管理 1. 协议状态 七层网络协议，大多都是有状态协议，如 SMTP ，但 HTTP 协议，则是无状态协议 1.1 有状态协议 如 SMTP 协议\r发送前必须先建立 TCP 连接，并发送 HELO/EHLO 建立会话; \r然后进入 AUTH 认证; \r认证通过才可以发送数据; \r通过 QUI 命令关闭会话; 如上，整个通信过程，双方是必须要时刻记住当前连"},["/python/框架/网络框架基础/Cookie和Sessions.html","/python/%E6%A1%86%E6%9E%B6/%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/Cookie%E5%92%8CSessions","/python/框架/网络框架基础/Cookie和Sessions.md","/python/%E6%A1%86%E6%9E%B6/%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/Cookie%E5%92%8CSessions.md"]],
  ["v-2f932e2a","/python/%E6%A1%86%E6%9E%B6/%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/web%E6%A1%86%E6%9E%B6%E6%9C%AC%E8%B4%A8.html",{"title":"web框架本质","type":"article","readingTime":{"minutes":2.58,"words":775},"excerpt":"Web 框架 1. Web 通信 Web 框架的通信本质和 socket 类似，是网络通信，无非是走 http 协议，或是什么其他协议，故可以当做一个 socket 服务端，而浏览器则视为 socket 客户端 那么，Web 应用 流程为：\r浏览器（客户端）发 个 HTTP 请求; \r服务器（Web 框架）收到请求，并处理一些列逻辑（\\*SQL、计算、数据处"},["/python/框架/网络框架基础/web框架本质.html","/python/%E6%A1%86%E6%9E%B6/%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/web%E6%A1%86%E6%9E%B6%E6%9C%AC%E8%B4%A8","/python/框架/网络框架基础/web框架本质.md","/python/%E6%A1%86%E6%9E%B6/%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/web%E6%A1%86%E6%9E%B6%E6%9C%AC%E8%B4%A8.md"]],
  ["v-b1b18c12","/python/%E7%94%9F%E6%80%81/Alert/alert.html",{"title":"告警资源","type":"article","readingTime":{"minutes":0.08,"words":25},"excerpt":"告警资源 告警"},["/python/生态/Alert/alert.html","/python/%E7%94%9F%E6%80%81/Alert/alert","/python/生态/Alert/alert.md","/python/%E7%94%9F%E6%80%81/Alert/alert.md"]],
  ["v-05697537","/python/%E7%94%9F%E6%80%81/APScheduler/APScheduler.html",{"title":"APScheduler","type":"article","readingTime":{"minutes":6.4,"words":1919},"excerpt":"APScheduler http://apscheduler.readthedocs.io/en/latest/ 一、APScheduler 简介： APScheduler 基于 Quartz （开源作业调度框架）的一个 Python 定时任务框架，实现了 Quartz 的所有功能，使用起来十分方便。提供了基于日期、 固定时间间隔以及 crontab 类型的"},["/python/生态/APScheduler/APScheduler.html","/python/%E7%94%9F%E6%80%81/APScheduler/APScheduler","/python/生态/APScheduler/APScheduler.md","/python/%E7%94%9F%E6%80%81/APScheduler/APScheduler.md"]],
  ["v-234d9bea","/python/%E7%94%9F%E6%80%81/MQ/RabbitMQ%E9%98%9F%E5%88%97.html",{"title":"RabbitMQ","type":"article","readingTime":{"minutes":11.42,"words":3426},"excerpt":"RabbitMQ 队列：（重要组件） 消息队列，非常 nb。通用很多种语言，不同语言之间，不同机器上实现队列。--消息中间件（开发语言是 erlang 爱立信开发，改代码局部生效，热插拔） 线程 q 实现了同一个进程之间的不同线程的交互（两个进程之间的线程 q 不能互相通信） 进程 Q 实现了不同进程之间的数据交互。 异步-实现大并发（专业级别的，甩py几十"},["/python/生态/MQ/RabbitMQ队列.html","/python/%E7%94%9F%E6%80%81/MQ/RabbitMQ%E9%98%9F%E5%88%97","/python/生态/MQ/RabbitMQ队列.md","/python/%E7%94%9F%E6%80%81/MQ/RabbitMQ%E9%98%9F%E5%88%97.md"]],
  ["v-067c36ca","/python/%E7%94%9F%E6%80%81/RPC/grpc.html",{"title":"grpc","type":"article","readingTime":{"minutes":2.14,"words":641},"excerpt":"grpc\r\" 目前最为主流，基于 go 语言开发的 rpc，有 python异步版 可以和 FastAPI 相结合，异步，好用！\" 1. 部分文档 1.1 论文 graphics 1.2 服务配置 Service Config in gRPC arg_keys 1.3 重试策略 what is xDS 1.4 开源引用 aioetcd3 使用老版本的非 ai"},["/python/生态/RPC/grpc.html","/python/%E7%94%9F%E6%80%81/RPC/grpc","/python/生态/RPC/grpc.md","/python/%E7%94%9F%E6%80%81/RPC/grpc.md"]],
  ["v-59829374","/python/%E7%94%9F%E6%80%81/RPC/python_RPC.html",{"title":"RPC服务基础","type":"article","readingTime":{"minutes":9.03,"words":2709},"excerpt":"#python_RPC 服务 一、RPC 的交互过程 常见以 Http 协议为基础的 RPC： grpc、restfulHTTP 以 socket 为基础的 RPC： python自带的xmlrpc、twisted、thrift、pryo 1.什么是 RPC RPC： (Remote Procedure Call)即远程过程调用\r是分布式系统常见的一种通信方"},["/python/生态/RPC/python_RPC.html","/python/%E7%94%9F%E6%80%81/RPC/python_RPC","/python/生态/RPC/python_RPC.md","/python/%E7%94%9F%E6%80%81/RPC/python_RPC.md"]],
  ["v-fd5d7046","/python/%E7%94%9F%E6%80%81/RPC/Twisted%E4%B8%8ERPC%E7%BB%93%E5%90%88.html",{"title":"Twisted","type":"article","readingTime":{"minutes":3.33,"words":1000},"excerpt":"Twisted 框架 Twisted 是用 Python 实现的基于事件驱动的网络引擎框架，是 python 中一个强大的异步 IO 库。 一、安装： pip3 install twisted # window 下会安装失败 win 下转到该网站下载： https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted T"},["/python/生态/RPC/Twisted与RPC结合.html","/python/%E7%94%9F%E6%80%81/RPC/Twisted%E4%B8%8ERPC%E7%BB%93%E5%90%88","/python/生态/RPC/Twisted与RPC结合.md","/python/%E7%94%9F%E6%80%81/RPC/Twisted%E4%B8%8ERPC%E7%BB%93%E5%90%88.md"]],
  ["v-42da38d8","/python/%E7%94%9F%E6%80%81/RPC/%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8_Pyro.html",{"title":"PYRO","type":"article","readingTime":{"minutes":9.47,"words":2842},"excerpt":"分布式远程调用 PYRO 可惜非异步 一、概述 1.是啥 使对象通过网络以最小的编程工作量，实现只用普通的 Python 方法调用来调 分布式计算机上运行对象的 纯 Python 库 2.用途\r分发和集成各种资源或职责：计算（硬件）资源（cpu，存储，打印机），信息资源（数据，特权信息）和业务逻辑（部门，域）。; \r将群集上的可用资源公开给其他计算机。; \r"},["/python/生态/RPC/分布式远程调用_Pyro.html","/python/%E7%94%9F%E6%80%81/RPC/%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8_Pyro","/python/生态/RPC/分布式远程调用_Pyro.md","/python/%E7%94%9F%E6%80%81/RPC/%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8_Pyro.md"]],
  ["v-c7658b28","/python/%E7%94%9F%E6%80%81/SQLAlchemy/%E5%9F%BA%E7%A1%80.html",{"title":"SQLAlchemy基础","type":"article","readingTime":{"minutes":9.37,"words":2812},"excerpt":"SQLAlchemy： 一、sqlalchemy 安装： 在 Python 中，最有名的 ORM 框架是 SQLAlchemy。用户包括 openstack＼Dropbox 等知名公司或应用。 主要用户列表http://www.sqlalchemy.org/organizations.html#openstack 安装： pip install SQLAlc"},["/python/生态/SQLAlchemy/基础.html","/python/%E7%94%9F%E6%80%81/SQLAlchemy/%E5%9F%BA%E7%A1%80","/python/生态/SQLAlchemy/基础.md","/python/%E7%94%9F%E6%80%81/SQLAlchemy/%E5%9F%BA%E7%A1%80.md"]],
  ["v-3995cc4a","/python/%E7%94%9F%E6%80%81/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/Celery%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80.html",{"title":"Celery使用","type":"article","readingTime":{"minutes":5.21,"words":1564},"excerpt":"Celery-分布式任务队列： 现在远程客户端发起一条命令 cmd sshClient ————————> sshServer 发送命令需要一个队列，交给远程去执行，要等待一个结果。若任务再 Server 端要执行 5 分钟那么就要等 5 分钟。 （rabbitmq 中执行 rpc 双向队列，我们自己也可以搞成异步的，就是麻烦一些。因此用基于它的 celer"},["/python/生态/异步任务/Celery使用基础.html","/python/%E7%94%9F%E6%80%81/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/Celery%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80","/python/生态/异步任务/Celery使用基础.md","/python/%E7%94%9F%E6%80%81/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/Celery%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80.md"]],
  ["v-fde169d0","/python/%E7%94%9F%E6%80%81/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/Celery%E5%9F%BA%E7%A1%80.html",{"title":"Celery基础","type":"article","readingTime":{"minutes":3.33,"words":1000},"excerpt":"Celery Task Celery 是一个简单、灵活且可靠的，处理大量消息的分布式系统，\r专注于实时处理的异步任务队列; \r支持任务调度等定时任务; 一、celery 概述： 1.celery 组成： Celery 的架构由三部分组成，消息中间件（message broker），任务执行单元（worker）和任务执行结果存储（task result sto"},["/python/生态/异步任务/Celery基础.html","/python/%E7%94%9F%E6%80%81/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/Celery%E5%9F%BA%E7%A1%80","/python/生态/异步任务/Celery基础.md","/python/%E7%94%9F%E6%80%81/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/Celery%E5%9F%BA%E7%A1%80.md"]],
  ["v-6f5a6bca","/python/%E7%94%9F%E6%80%81/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%A6%82%E8%BF%B0.html",{"title":"异步任务雏形","type":"article","readingTime":{"minutes":5.31,"words":1593},"excerpt":"异步任务雏形 造轮子： 使用 etcd 作为中间件，自行构建一套异步任务 参考：\r1. 异步概述; \r2. 异步编程; 手动实现异步任务（仿 Celery 模型） 刚好最近项目需求：实现一个基于 etcd 的 aio_task 便从零开始造个轮子 异步任务队列： 用来减缓高并发，将任务写入队列，通过一定顺序异步执行，因此需要任务队列作为管道\r\" 目的是为了："},["/python/生态/异步任务/异步任务概述.html","/python/%E7%94%9F%E6%80%81/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%A6%82%E8%BF%B0","/python/生态/异步任务/异步任务概述.md","/python/%E7%94%9F%E6%80%81/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%A6%82%E8%BF%B0.md"]],
  ["v-6d8029f2","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/pip.html",{"title":"pip","type":"article","readingTime":{"minutes":1.11,"words":332},"excerpt":"pip（包管理器） 1. 使用基础 1.1 换源 PYPI 国内源路径\r阿里云 http://mirrors.aliyun.com/pypi/simple/; \r豆瓣 http://pypi.douban.com/simple/; \r清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/; \r中国科学技术大学 http:","date":"2020-03-25T00:00:00.000Z","localizedDate":"2020年3月25日","category":["Python"],"tag":["pip"],"star":true},["/python/语言/基础/pip.html","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/pip","/python/语言/基础/pip.md","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/pip.md"]],
  ["v-46c2efcc","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.html",{"title":"字符编码","type":"article","readingTime":{"minutes":3.66,"words":1099},"excerpt":"字符编码 Python3 明确区分了人类可读的 文本字符串 和原始的 字节序列 编解码器 文档 1. 字符 1.1 编码中的字符串 “字符串” 是个相当简单的概念：字符串就是字符组成的序列，问题出现在 “字符” 的定义上\r\" 字符： 2015 年将字符最佳定义为 Unicode 字符，因此 Python3 的 str 对象获取的元素就是 Unicode 字符"},["/python/语言/基础/字符编码.html","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81","/python/语言/基础/字符编码.md","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.md"]],
  ["v-76f867fa","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{"title":"数据类型","type":"article","readingTime":{"minutes":16.89,"words":5066},"excerpt":"数据类型 Python 是 强类型（安全，不同类型禁止相加）、动态（不显示数据类型）、脚本（通过解释器执行）语言，开发效率高、灵活，但不健壮 官方文档 Python3上统一编码为 Unicode ，部分 Windows 系统，cmd 无法输入中文，请执行如下命令 1. 数字类（Number）\rAPI方法 文档 ; \r此类对象由数字字面值创建，并会被作为 算术","date":"2020-04-17T00:00:00.000Z","localizedDate":"2020年4月17日","category":["Python"],"tag":["Python"],"sticky":1,"star":true},["/python/语言/基础/数据类型.html","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B","/python/语言/基础/数据类型.md","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.md"]],
  ["v-6a3ef20c","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E5%9F%BA%E7%A1%80.html",{"title":"文件基础","type":"article","readingTime":{"minutes":6.76,"words":2028},"excerpt":"文件 1. 文件基础 Unix 理念：一切皆文件\r包括操作系统，所有的一切都是文件; \r因此对于所有，无非涉及：打开 、操作 、 关闭 这 3 个动作，即文件操作的雏形; 1.1 文件操作 Python 操作文件使用 open() open(file, mode='r', buffering=- 1, encoding=None, errors=None, "},["/python/语言/基础/文件基础.html","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E5%9F%BA%E7%A1%80","/python/语言/基础/文件基础.md","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/%E6%96%87%E4%BB%B6%E5%9F%BA%E7%A1%80.md"]],
  ["v-7126c988","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.html",{"title":"流程控制","type":"article","readingTime":{"minutes":2.36,"words":709},"excerpt":"流程控制 1. 条件判断 1.1 if 语句 if / if-else / if-elif-else 用于对条件的判断，若找到真值，则执行子句体，书写格式如下\r\" Python 中 没有 switch - case 语句，通常用字典 dict 模拟，3.10 后出现 match 语句，替代switch\" 1.2 判断运算符 常用的语义化运算符\r身份运算符: ","date":"2020-04-19T00:00:00.000Z","localizedDate":"2020年4月19日","category":["Python"],"tag":["Python"],"star":true},["/python/语言/基础/流程控制.html","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6","/python/语言/基础/流程控制.md","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6.md"]],
  ["v-14e723b3","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85.html",{"title":"Python 环境安装","type":"article","readingTime":{"minutes":1.28,"words":383},"excerpt":"Python 环境安装 1. 环境安装 Python 下载 | Miniconda 下载 2. python 风格指南 PEP 8 3. Pycharm 3.1 通用设置 基本都在 setting -> editor 中找\r\" 背景图： 双击 Shift -> set background\"\rlint： 用于检查代码规范（需下载安装&配置） Pycharm ","date":"2020-03-17T00:00:00.000Z","localizedDate":"2020年3月17日","category":["Python"],"tag":["Pycharm"],"star":true},["/python/语言/基础/环境安装.html","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85","/python/语言/基础/环境安装.md","/python/%E8%AF%AD%E8%A8%80/%E5%9F%BA%E7%A1%80/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85.md"]],
  ["v-3734b842","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/asyncio%20Recipes.html",{"title":"异步IO食谱","type":"article","readingTime":{"minutes":0.69,"words":208},"excerpt":"asyncio Recipes ————————A Problem-Solution Approach Working with Event Loops 一、处理事件循环 1.定位事件循环问题 并发框架必须能够告诉您事件循环当前是否正在运行，以及它是哪个是。 例如：你写的代码中应该断言只有一个循环在执行任务。因此只有一项任务可以更改某些共享资源或确保回调派遣"},["/python/语言/异步编程/asyncio Recipes.html","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/asyncio%20Recipes","/python/语言/异步编程/asyncio Recipes.md","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/asyncio%20Recipes.md"]],
  ["v-6cdcbbac","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/asyncio%E5%9F%BA%E7%A1%80.html",{"title":"asyncio基础","type":"article","readingTime":{"minutes":19.2,"words":5760},"excerpt":"asyncio —— 异步 I/O 基础 asyncio API 文档 1. 概述 asyncio 是用来编写 并发代码 的库，使用 async/await 语法。 场景：被用作多个提供高性能 Python 异步框架的基础，包括网络和网站服务，数据库连接库，分布式任务队列等等。往往是构建 IO 密集型和高层级 结构化 网络代码的最佳选择。 asyncio 提"},["/python/语言/异步编程/asyncio基础.html","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/asyncio%E5%9F%BA%E7%A1%80","/python/语言/异步编程/asyncio基础.md","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/asyncio%E5%9F%BA%E7%A1%80.md"]],
  ["v-60dc4f1a","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/asyncio%E8%BF%9B%E9%98%B6.html",{"title":"asyncio进阶","type":"article","readingTime":{"minutes":1.38,"words":415},"excerpt":"asyncio —— 异步 I/O 进阶 一、队列集 二、子进程 subprocess 结合异步应用 ####需求： 需要 ping 内网中的所有 ip 地址，是否都可以 pnig 通。 内网网段为：192.168.31.0/24 完整代码： #!/usr/bin/env python3 # coding: utf-8 import time import "},["/python/语言/异步编程/asyncio进阶.html","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/asyncio%E8%BF%9B%E9%98%B6","/python/语言/异步编程/asyncio进阶.md","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/asyncio%E8%BF%9B%E9%98%B6.md"]],
  ["v-dc7f4af4","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.html",{"title":"事件循环","type":"article","readingTime":{"minutes":4.9,"words":1470},"excerpt":"asyncio ———— 不同线程的事件循环 https://www.cnblogs.com/yanzi-meng/p/8533734.html 不同线程的事件循环 1.同一线程： import asyncio,time async def func1(num): print(num,'before---func1----') await asyncio.s"},["/python/语言/异步编程/事件循环.html","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF","/python/语言/异步编程/事件循环.md","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.md"]],
  ["v-2e445dfa","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0.html",{"title":"C级解构","type":"article","readingTime":{"minutes":20.37,"words":6110},"excerpt":"实现简化版 asyncio https://zhuanlan.zhihu.com/p/64991670 嗐，要弄懂一个玩意到底是啥，当然少不了一睹 cpython 与 asyncio 的源码。 一、进程、线程与协程 多进程、多线程、协程的模型都是为了解决多个任务同时进行的问题。 多系统任务：关键在于暂停当前任务，保存当前任务现场（状态），选择下一任务，恢复下"},["/python/语言/异步编程/底层实现.html","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0","/python/语言/异步编程/底层实现.md","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0.md"]],
  ["v-6d0345af","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E5%9B%9E%E6%BA%AF.html",{"title":"异步编程史回溯","type":"article","readingTime":{"minutes":19.18,"words":5755},"excerpt":"异步编程史回溯 从同步到yield from 回溯 一、程序执行基础概念： 1.1 阻塞\r程序未得到所需计算资源时被挂起的状态。; \r程序在等待某个操作完成期间，自身无法继续干别的事情，则称该程序在该操作上是阻塞的。; \r常见的阻塞形式有：网络 I/O 阻塞、磁盘 I/O 阻塞、用户输入阻塞等。; 阻塞是无处不在的，包括 CPU 切换上下文时，所有的进程都无"},["/python/语言/异步编程/异步回溯.html","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E5%9B%9E%E6%BA%AF","/python/语言/异步编程/异步回溯.md","/python/%E8%AF%AD%E8%A8%80/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E5%9B%9E%E6%BA%AF.md"]],
  ["v-7b667df4","/python/%E8%AF%AD%E8%A8%80/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Socket.html",{"title":"Socket编程","type":"article","readingTime":{"minutes":7.66,"words":2299},"excerpt":"Socket 编程: 请先参考：网络基础 Socket:(套接字) 我们可以利用ip地址 + 协议 + 端口号唯一标示网络中的一个进程。能够唯一标示网络中的进程后，它们就可以利用socket 进行通信了，我们经常把socket翻译为套接字，socket是在应用层和传输层(TCP/IP协议族通信)之间的一个抽象层，是一组接口，它把 TCP/IP层复杂的操作抽象"},["/python/语言/网络编程/Socket.html","/python/%E8%AF%AD%E8%A8%80/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Socket","/python/语言/网络编程/Socket.md","/python/%E8%AF%AD%E8%A8%80/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Socket.md"]],
  ["v-3a8f53f8","/python/%E8%AF%AD%E8%A8%80/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Websocket.html",{"title":"WebSocket编程","type":"article","readingTime":{"minutes":3.89,"words":1167},"excerpt":"WebSocket 协议 一、websocket 概述 Node.js：socketio：https://socket.io/ Python：websockets 库 0.简述： WebSocket 是一种通信协议，用来前后端交互，是 HTML5 引入的 api，弥补 http 协议上的不足之处，可在服务器和浏览器之间提供全双工和低延迟通道。\r浏览器支持 W"},["/python/语言/网络编程/Websocket.html","/python/%E8%AF%AD%E8%A8%80/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Websocket","/python/语言/网络编程/Websocket.md","/python/%E8%AF%AD%E8%A8%80/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Websocket.md"]],
  ["v-276b708c","/python/%E8%AF%AD%E8%A8%80/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B.html",{"title":"事件驱动模型","type":"article","readingTime":{"minutes":31.4,"words":9419},"excerpt":"事件驱动： 属于一种编程的范式：说白了一种编程的思想，一种编程的风格 传统的编程风格：（是控制流）比如代码块 A 实现了一个功能，代码块 B 实现了一个功能，之后通过一种顺序的执行，跑出一个结果。 线性的：代码块 A-->代码块 B-->代码块 C-->代码块 D-->...-->结束 但是事件驱动是和传统的编程风格完全不同的。而且在以后的公司里大多数情况下"},["/python/语言/网络编程/事件模型.html","/python/%E8%AF%AD%E8%A8%80/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B","/python/语言/网络编程/事件模型.md","/python/%E8%AF%AD%E8%A8%80/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B.md"]],
  ["v-5a05b5aa","/python/%E8%AF%AD%E8%A8%80/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E8%AE%BA%E5%9B%9E%E8%B0%83.html",{"title":"事件の起源——回调","type":"article","readingTime":{"minutes":2.31,"words":694},"excerpt":"接口的调用通常分为三类： 1.同步调用： 是一种阻塞式调用，调用方要等待对方执行完毕才返回，它是一种单向调用 2.回调： 回调是一种双向调用模式，也就是说，被调用方在接口被调用时也会调用对方的接口。你把函数作为参数传过去，传过去的回调函数同时也 需要接收执行一方的参数。（我有肉你有刀，我要调用你的刀再传入我的肉） 定义：把函数的指针（地址）作为参数传递给另一"},["/python/语言/网络编程/论回调.html","/python/%E8%AF%AD%E8%A8%80/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E8%AE%BA%E5%9B%9E%E8%B0%83","/python/语言/网络编程/论回调.md","/python/%E8%AF%AD%E8%A8%80/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E8%AE%BA%E5%9B%9E%E8%B0%83.md"]],
  ["v-40ab40c8","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E5%8D%8F%E7%A8%8B.html",{"title":"协程","type":"article","readingTime":{"minutes":6.88,"words":2063},"excerpt":"协程 Coroutine 协程不是计算机提供的，而是程序员创造 的 一、协程概念： 1.1 为什么要有协程？ 痛点：\r同步编程 的并发性不高; \r多进程编程 效率受 CPU 核数限制，当任务数量远大于 CPU 核数时，执行效率会降低（分片）; \r多线程编程 需要线程之间的通信，而且需要锁机制来防止共享变量被不同线程乱改，有GIL(全局解释器锁) 实际上也无法"},["/python/语言/资源调度/协程.html","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E5%8D%8F%E7%A8%8B","/python/语言/资源调度/协程.md","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E5%8D%8F%E7%A8%8B.md"]],
  ["v-29053245","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E5%90%8C%E6%AD%A5%E9%98%9F%E5%88%97.html",{"title":"同步队列","type":"article","readingTime":{"minutes":0.29,"words":88},"excerpt":"queue 同步队列 queue 模块实现了多生产者、多消费者队列。这特别适用于消息必须安全地在多线程间交换的线程编程。模块中的 Queue 类实现了所有所需的锁定语义。"},["/python/语言/资源调度/同步队列.html","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E5%90%8C%E6%AD%A5%E9%98%9F%E5%88%97","/python/语言/资源调度/同步队列.md","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E5%90%8C%E6%AD%A5%E9%98%9F%E5%88%97.md"]],
  ["v-0b540c98","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B.html",{"title":"多线程编程","type":"article","readingTime":{"minutes":0.54,"words":163},"excerpt":"基于线程的并发 threading：在 py2 中曾废弃了 thread 模块，在 py3 中作为底层模块 _thread，通常在其基础上建立更高级的线程接口 GIL 锁：又称全局解释器锁，Cpython 解释器采用的一种垃圾机制，它限制了同一时刻，只有一个线程被执行，使得解释器运行多线程方便，但多核处理器上不能够并行运作，因此多核密集型计算应该使用 多进程"},["/python/语言/资源调度/多线程编程.html","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B","/python/语言/资源调度/多线程编程.md","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B.md"]],
  ["v-29d39496","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B.html",{"title":"多进程编程","type":"article","readingTime":{"minutes":6.67,"words":2002},"excerpt":"基于进程的并行 multiprocessing：是一个与 threading 模块类似的包，能提供本地和远程的 并发 操作（若多核那么就是 并行 操作）。它利用子进程来绕过了 GIL 锁 ，适用于 Unix 和 Windows 系统的 CPU(计算)密集型操作（且通常不依赖上次计算结果） multiprocessing 主要功能介绍\r主要用于创建 子进程 对"},["/python/语言/资源调度/多进程编程.html","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B","/python/语言/资源调度/多进程编程.md","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B.md"]],
  ["v-f8fdbefe","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E7%BA%BF%E7%A8%8B.html",{"title":"线程","type":"article","readingTime":{"minutes":4.36,"words":1307},"excerpt":"线程 线程(thread) 是 操作系统运算调度 的最小单位，它被包含在 进程 之中，是进程中的实际运作单位。 一、区分概念 1. CPU 级别的线程： 此线程非彼线程： 我们买硬件时常说如：CPU 酷睿i9-11900K 8核16线程，这里的线程，意味着是能够同时并行执行 16 个程序 的意思 我们知道，程序的多道执行，是被操作系统封装代码为了进程，给了上"},["/python/语言/资源调度/线程.html","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E7%BA%BF%E7%A8%8B","/python/语言/资源调度/线程.md","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E7%BA%BF%E7%A8%8B.md"]],
  ["v-60196284","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E7%BA%BF%E7%A8%8B%E8%BF%9B%E7%A8%8B%E8%BE%85%E5%8A%A9%E6%9C%BA%E5%88%B6.html",{"title":"辅助机制","type":"article","readingTime":{"minutes":11.87,"words":3560},"excerpt":"一、线程辅助 一.信号量(Semaphore)： 首先，它也是一把锁。和 RLock()类似的是它内部也是维护这多把锁，但区别在于它是并行的锁，而不是像递归锁那样嵌套的。假设现在的锁的数量 count = 4 那么此时开辟一百个线程只有 4 个线程可以进来。（这不是真正的并行，也有先后进入，就好似 CPU 只让它在先进入的四个线程中切换执行， 因此达到控制 "},["/python/语言/资源调度/线程进程辅助机制.html","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E7%BA%BF%E7%A8%8B%E8%BF%9B%E7%A8%8B%E8%BE%85%E5%8A%A9%E6%9C%BA%E5%88%B6","/python/语言/资源调度/线程进程辅助机制.md","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E7%BA%BF%E7%A8%8B%E8%BF%9B%E7%A8%8B%E8%BE%85%E5%8A%A9%E6%9C%BA%E5%88%B6.md"]],
  ["v-11650ac2","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E8%BF%9B%E7%A8%8B.html",{"title":"进程","type":"article","readingTime":{"minutes":2.9,"words":871},"excerpt":"进程 首先讨论进程前先要弄清 并行 和 并发 两个概念 1. 并行与并发 1.1 并行\r当计算资源有多个 CPU 时，或一个 CPU 有多核多线程时，每一个 CPU 的线程在同一时刻，都能执行一个进程; \r两个 CPU 线程同一时刻，可以 同时执行 两个不同的进程，且不会相互抢夺资源，这种方式即为并行; \r并行不一定并发，也有同步&异步，并行也会阻塞，但异步"},["/python/语言/资源调度/进程.html","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E8%BF%9B%E7%A8%8B","/python/语言/资源调度/进程.md","/python/%E8%AF%AD%E8%A8%80/%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6/%E8%BF%9B%E7%A8%8B.md"]],
  ["v-a901bc86","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E5%87%BD%E6%95%B0.html",{"title":"函数","type":"article","readingTime":{"minutes":11.04,"words":3312},"excerpt":"函数 1. 概念 1.1 函数定义\r函数，不应该理解为数学中的函数 != function(); \r计算机的函数，则应该理解为== subroutine ，这在 BASIC 中称为 子程序，在 Pascal 中叫做 过程（procedures）; \r在 C / Python 中通常称为 function 函数 ，而 Java 中则叫 method 方法; 创"},["/python/语言/进阶/函数.html","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E5%87%BD%E6%95%B0","/python/语言/进阶/函数.md","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E5%87%BD%E6%95%B0.md"]],
  ["v-578be6e6","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E5%8F%98%E9%87%8F%E6%9C%BA%E5%88%B6.html",{"title":"变量机制","type":"article","readingTime":{"minutes":3.5,"words":1051},"excerpt":"变量机制 1. 深浅拷贝 1.1 变量实现原理\r暂将 Python 中的变量理解为标签，首先，a = 1 就是将不可变的整型 1 ，赋值给了 a ，即：标签名为 a 的变量，给内存中的整型对象 1 贴上了标签; \r变量 a 存放了 1 的地址 （1938697316656）; \rprint(a) 时， a 中存放的地址指针，就会指向了（19386973166"},["/python/语言/进阶/变量机制.html","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E5%8F%98%E9%87%8F%E6%9C%BA%E5%88%B6","/python/语言/进阶/变量机制.md","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E5%8F%98%E9%87%8F%E6%9C%BA%E5%88%B6.md"]],
  ["v-181247d4","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85.html",{"title":"模块和包","type":"article","readingTime":{"minutes":9.34,"words":2802},"excerpt":"模块和包 1. 模块 用一砣代码实现了某个功能的代码集合 类似于 函数式编程 和 面向过程编程\r函数式编程： 也叫 无副作用 编程，它不会改变外部变量; \r面向过程：函数的堆砌，不断调用函数来完成一个功能，提供了代码的 重用性 和 代码间的耦合; 模块分为三种\r自定义模块：自己写的模块; \r内置标准模块：又称标准库; \r开源模块; 1.1 模块的调用 使用 "},["/python/语言/进阶/模块和包.html","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85","/python/语言/进阶/模块和包.md","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85.md"]],
  ["v-aa761386","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E7%94%9F%E6%88%90%E5%99%A8.html",{"title":"生成器","type":"article","readingTime":{"minutes":11.65,"words":3495},"excerpt":"生成器 所有的生成器都是 迭代器，因为生成器 完全实现 了迭代器接口\r\" 迭代器从集合中取元素，而生成器用于 凭空 生成元素\" 【概述】：含有 yield 关键字的函数就是生成器函数。 列表生成式:(用于生成列表，这可不是生成器) [x for x in range(10)] 这样写有病啊 一个range(10)不就出来了 那[x2 for x in ran"},["/python/语言/进阶/生成器.html","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E7%94%9F%E6%88%90%E5%99%A8","/python/语言/进阶/生成器.md","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E7%94%9F%E6%88%90%E5%99%A8.md"]],
  ["v-8cdd0dee","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E8%A3%85%E9%A5%B0%E5%99%A8.html",{"title":"装饰器","type":"article","readingTime":{"minutes":14.13,"words":4239},"excerpt":"装饰器 1. 概述 装饰器（_Decorators_） 用于源码 ’标记‘ 函数，以某种方式增强函数的行为，必须先掌握 以下三个条件\r作用域; \r高阶函数; \r闭包 的方方面面; 1.1 基础知识 装饰器是可调用对象，其参数是另一个函数（被装饰的函数）。装饰器可能会处理被装饰的函数，然后把它返回，或者将其替换成另一个函数或可调用对象 假如有名为 decora"},["/python/语言/进阶/装饰器.html","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E8%A3%85%E9%A5%B0%E5%99%A8","/python/语言/进阶/装饰器.md","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E8%A3%85%E9%A5%B0%E5%99%A8.md"]],
  ["v-0b474588","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E8%BF%AD%E4%BB%A3%E5%99%A8.html",{"title":"迭代器","type":"article","readingTime":{"minutes":1.17,"words":352},"excerpt":"迭代器 迭代是数据处理的基石，内存放不下数据 时，需要找到一种 惰性获取数据项 的方式 1. 什么是迭代器\r\" 通常，迭代器是从 集合 中取元素，表示集合是有限多个，只是通过迭代器来一个个取\" 既然是取集合，那么所有集合都可迭代，场景如下：\r首先可迭代意味着可以 for 循环; \r构建和扩展集合类型; \r逐行遍历文本文件; \r列表、字典、集合推导; \r元组拆"},["/python/语言/进阶/迭代器.html","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E8%BF%AD%E4%BB%A3%E5%99%A8","/python/语言/进阶/迭代器.md","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E8%BF%AD%E4%BB%A3%E5%99%A8.md"]],
  ["v-4670bf71","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8.html",{"title":"错误和异常","type":"article","readingTime":{"minutes":0.03,"words":10},"excerpt":"异常"},["/python/语言/进阶/错误和异常.html","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8","/python/语言/进阶/错误和异常.md","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E9%94%99%E8%AF%AF%E5%92%8C%E5%BC%82%E5%B8%B8.md"]],
  ["v-f6f07338","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html",{"title":"面向对象","type":"article","readingTime":{"minutes":20.56,"words":6167},"excerpt":"面向对象 Python 里面一切皆对象 计算机中，一切皆对象，世界里，万物皆对象，对象皆分类 因此描述对象先不直接写一个对象而是先思考一类对象的共性 1. 对象 学过Java 的都知道 Object是 class 的一个实例， python 其实比 JAVA 面向对象更彻底，它的类和函数都是对象，它具有以下 【特性】：\r赋值给一个变量; \r可以添加到集合对象"},["/python/语言/进阶/面向对象.html","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1","/python/语言/进阶/面向对象.md","/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.md"]],
  ["v-245bcece","/python/%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7/Cpython%E5%AF%B9%E8%B1%A1.html",{"title":"Cpython 对象","type":"article","readingTime":{"minutes":11.21,"words":3363},"excerpt":"Cpython 对象 1. python 对象实现机制 初步介绍 python 对象的实现机制。 在顶层抽象上，python 对象是属性、方法、作用域的集合。 在底层实现上，python 对象不过就是对 c 语言 struct 结构的封装。 python to C 结构体 一个 python 的 int 类型可写成如下形式 class python_int("},["/python/语言/高级/Cpython对象.html","/python/%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7/Cpython%E5%AF%B9%E8%B1%A1","/python/语言/高级/Cpython对象.md","/python/%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7/Cpython%E5%AF%B9%E8%B1%A1.md"]],
  ["v-7456911c","/python/%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html",{"title":"垃圾回收","type":"article","readingTime":{"minutes":5.96,"words":1787},"excerpt":"一、Python 垃圾回收机制 Python 的垃圾回收机制以引用计数为主，分代收集为辅。若一个对象的引用计数为 0，Python 虚拟机就会回收该对象的内存。 （一）垃圾回收机制： class ClassA(): def init(self): print 'object born,id:%s'%str(hex(id(self))) def del(sel"},["/python/语言/高级/垃圾回收.html","/python/%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6","/python/语言/高级/垃圾回收.md","/python/%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.md"]],
  ["v-155f8a5a","/python/%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7/%E5%BA%8F%E5%88%97%E8%BF%9B%E9%98%B6.html",{"title":"序列进阶","type":"article","readingTime":{"minutes":3.04,"words":913},"excerpt":"序列进阶 1. 序列协议 Python 中 序列协议：指任何类，只要实现 len 和 getitem 两个方法，就能当序列使\r\" 在面向对象编程中，协议是非正式接口，只在文档中定义，代码中不定义\" 示例：\r如上，实现了 len 和 getitem 方法，该实例化对象可以像序列一样被操作; \rsorted(args, *kwargs) 把 deck 视为列表接"},["/python/语言/高级/序列进阶.html","/python/%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7/%E5%BA%8F%E5%88%97%E8%BF%9B%E9%98%B6","/python/语言/高级/序列进阶.md","/python/%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7/%E5%BA%8F%E5%88%97%E8%BF%9B%E9%98%B6.md"]],
  ["v-72324e45","/python/%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7/%E6%98%A0%E5%B0%84%E8%BF%9B%E9%98%B6.html",{"title":"映射进阶","type":"article","readingTime":{"minutes":0.15,"words":44},"excerpt":"映射进阶 1. 映射协议 Python 中 映射协议： 2. 映射实现原理 散列表（_哈希_）"},["/python/语言/高级/映射进阶.html","/python/%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7/%E6%98%A0%E5%B0%84%E8%BF%9B%E9%98%B6","/python/语言/高级/映射进阶.md","/python/%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7/%E6%98%A0%E5%B0%84%E8%BF%9B%E9%98%B6.md"]],
  ["v-438e3a5a","/python/%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html",{"title":"设计模式","type":"article","readingTime":{"minutes":6.42,"words":1925},"excerpt":"Python 设计模式 一、单例模式 确保整个系统中，某个类，只有唯一一个实例存在 使用场景 1. 配置信息：\r\" 服务端配置信息存在一个文件中，通过一个Config 类来读取时，频繁 new Config 类会严重占内存，整个系统中只存了一份 Config 的实例即可反复读取\" 2. 数据库连接:\r\" 若未使用连接池来复用连接， 全局仅创建一个数据库连接实"},["/python/语言/高级/设计模式.html","/python/%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F","/python/语言/高级/设计模式.md","/python/%E8%AF%AD%E8%A8%80/%E9%AB%98%E7%BA%A7/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.md"]],
  ["v-3706649a","/404.html",{"title":"","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/404"]],
  ["v-5bc93818","/category/",{"title":"分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/index.html"]],
  ["v-744d024e","/tag/",{"title":"标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/index.html"]],
  ["v-e52c881c","/article/",{"title":"文章","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/article/index.html"]],
  ["v-75ed4ea4","/encrypted/",{"title":"加密","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/encrypted/index.html"]],
  ["v-d804e652","/slide/",{"title":"幻灯片","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/slide/index.html"]],
  ["v-154dc4c4","/star/",{"title":"收藏","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/star/index.html"]],
  ["v-01560935","/timeline/",{"title":"时间轴","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/timeline/index.html"]],
  ["v-03d57386","/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{"title":"使用指南 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/使用指南/","/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/index.html"]],
  ["v-83e1f92e","/tag/%E7%A6%81%E7%94%A8/",{"title":"禁用 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/禁用/","/tag/%E7%A6%81%E7%94%A8/index.html"]],
  ["v-3e5b7b84","/category/categorya/",{"title":"CategoryA 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/categorya/index.html"]],
  ["v-1e447d61","/tag/%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/",{"title":"文章加密 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/文章加密/","/tag/%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/index.html"]],
  ["v-3e5b7ba3","/category/categoryb/",{"title":"CategoryB 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/categoryb/index.html"]],
  ["v-484552dc","/tag/markdown/",{"title":"Markdown 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/markdown/index.html"]],
  ["v-78cbe7bb","/category/python/",{"title":"Python 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/python/index.html"]],
  ["v-a378ad66","/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",{"title":"页面配置 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/页面配置/","/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/index.html"]],
  ["v-7b167472","/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{"title":"使用指南 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/使用指南/","/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/index.html"]],
  ["v-06bbb262","/tag/tag-a/",{"title":"tag A 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/tag-a/index.html"]],
  ["v-06bbb224","/tag/tag-b/",{"title":"tag B 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/tag-b/index.html"]],
  ["v-b308a674","/tag/pip/",{"title":"pip 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/pip/index.html"]],
  ["v-245f5676","/tag/python/",{"title":"Python 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/python/index.html"]],
  ["v-a19cca62","/tag/pycharm/",{"title":"Pycharm 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/pycharm/index.html"]],
]
