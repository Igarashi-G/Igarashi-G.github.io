import comp from "D:/Program/Igarashi-G.github.io/blog/.vuepress/.temp/pages/database/Redis/redis.html.vue"
const data = JSON.parse("{\"path\":\"/database/Redis/redis.html\",\"title\":\"Redis\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"Redis\",\"order\":1,\"group\":{\"title\":\"Redis\",\"order\":4},\"description\":\"Redis 一、缓存数据库介绍： WEB2.0: UGC：user generate content。用户不再被动的接收信息，而是自己产生信息 SNS：social network society 社交网络，如 facebook、推特、wechat 等 二、redis： 介绍： redis 是业界主流的 key-value nosql 数据库之一。和 ...\",\"head\":[[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Redis\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"悦·宝宝\\\",\\\"url\\\":\\\"https://github.com/Igarashi-G\\\"}]}\"],[\"meta\",{\"property\":\"og:url\",\"content\":\"https://igarashi-g.github.io/database/Redis/redis.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"悦 ▪ 宝宝\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Redis\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"Redis 一、缓存数据库介绍： WEB2.0: UGC：user generate content。用户不再被动的接收信息，而是自己产生信息 SNS：social network society 社交网络，如 facebook、推特、wechat 等 二、redis： 介绍： redis 是业界主流的 key-value nosql 数据库之一。和 ...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}]]},\"readingTime\":{\"minutes\":19.02,\"words\":5707},\"filePathRelative\":\"database/Redis/redis.md\",\"excerpt\":\"\\n<p>一、缓存数据库介绍：<br>\\nWEB2.0:<br>\\nUGC：user generate content。用户不再被动的接收信息，而是自己产生信息<br>\\nSNS：social network society 社交网络，如 facebook、推特、wechat 等</p>\\n<pre><code>NoSQL(NoSQL = Not Only SQL )，意即\\\"不仅仅是SQL\\\"，泛指非关系型的数据库,随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，\\n特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了\\n非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。\\n\\nNoSQL数据库的四大分类：\\n    1.键值(Key-Value)存储数据库:\\n        这一类数据库主要会使用到一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、\\n        易部署。但是如果DBA只对部分值进行查询或更新的时候，Key/value就显得效率低下了。[3]\\n        举例如：Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB.\\n\\n    2.列存储数据库：(海量、大数据)\\n        这部分数据库通常是用来应对分布式存储的海量数据。键仍然存在，但是它们的特点是指向了多个列。这些列是由列家族来安排的。\\n        如：Cassandra, HBase（大数据开发经常用，做数据分析）, Riak.\\n\\n    3.文档型数据库:\\n        文档型数据库的灵感是来自于Lotus Notes办公软件的，而且它同第一种键值存储相类似。该类型的数据模型是版本化的文档，半结构化的\\n        文档以特定的格式存储，比如JSON。文档型数据库可 以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的\\n        查询效率更高。如：CouchDB, MongoDb. 国内也有文档型数据库SequoiaDB，已经开源。\\n\\n    4.图形(Graph)数据库:\\n        图形结构的数据库同其他行列以及刚性结构的SQL数据库不同，它是使用灵活的图形模型，并且能够扩展到多个服务器上。\\n        NoSQL数据库没有标准的查询语言(SQL)，因此进行数据库查询需要制定数据模型。许多NoSQL数据库都有REST式的数据接口或者查询API。\\n        如：Neo4J, InfoGrid, Infinite Graph.\\n\\n    因此，我们总结NoSQL数据库在以下的这几种情况下比较适用：\\n        1、数据模型比较简单；\\n        2、需要灵活性更强的IT系统；\\n        3、对数据库性能要求较高；\\n        4、不需要高度的数据一致性；\\n        5、对于给定key，比较容易映射复杂值的环境。\\n\\n键值（key-value）的：（redis）\\n    典型应用场景：内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。\\n    数据模型：Key 指向 Value 的键值对，通常用hash table来实现\\n    优点：查找速度快\\n    缺点：数据无结构化，通常只被当作字符串或者二进制数据\\n\\n列存储数据库：\\n    典型应用场景\\t：分布式的文件系统\\n    数据模型：以列簇式存储，将同一列数据存在一起\\n    优点：查找速度快，可扩展性强，更容易进行分布式扩展\\n    缺点：功能相对局限\\n\\n文档型数据库：\\n    典型应用场景\\t：Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）\\n    数据模型：Key-Value对应的键值对，Value为结构化数据\\n    优点：数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构\\n    缺点：查询性能不高，而且缺乏统一的查询语法。\\n\\n图形(Graph)数据库：\\n    典型应用场景\\t：社交网络，推荐系统等。专注于构建关系图谱\\n    数据模型：图结构\\n    优点：利用图结构相关算法。比如最短路径寻址，N度关系查找等\\n    缺点：很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案。\\n</code></pre>\",\"autoDesc\":true}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
