{
  "version": 3,
  "sources": ["../../../../node_modules/.pnpm/vuepress-theme-hope@2.0.0-beta.100/node_modules/vuepress-theme-hope/src/client/modules/encrypt/components/PasswordModal.ts", "../../../../node_modules/.pnpm/bcrypt-ts@2.2.2/node_modules/bcrypt-ts/src/constant.ts", "../../../../node_modules/.pnpm/bcrypt-ts@2.2.2/node_modules/bcrypt-ts/src/base64.ts", "../../../../node_modules/.pnpm/bcrypt-ts@2.2.2/node_modules/bcrypt-ts/src/utils.ts", "../../../../node_modules/.pnpm/bcrypt-ts@2.2.2/node_modules/bcrypt-ts/src/crypt.ts", "../../../../node_modules/.pnpm/bcrypt-ts@2.2.2/node_modules/bcrypt-ts/src/salt.ts", "../../../../node_modules/.pnpm/bcrypt-ts@2.2.2/node_modules/bcrypt-ts/src/random/browser.ts", "../../../../node_modules/.pnpm/bcrypt-ts@2.2.2/node_modules/bcrypt-ts/src/hash.ts", "../../../../node_modules/.pnpm/bcrypt-ts@2.2.2/node_modules/bcrypt-ts/src/utfx.ts", "../../../../node_modules/.pnpm/bcrypt-ts@2.2.2/node_modules/bcrypt-ts/src/compare.ts", "../../../../node_modules/.pnpm/bcrypt-ts@2.2.2/node_modules/bcrypt-ts/src/helpers.ts", "../../../../node_modules/.pnpm/vuepress-theme-hope@2.0.0-beta.100/node_modules/vuepress-theme-hope/src/client/modules/encrypt/composables/utils.ts", "../../../../node_modules/.pnpm/vuepress-theme-hope@2.0.0-beta.100/node_modules/vuepress-theme-hope/src/client/modules/encrypt/composables/global.ts", "../../../../node_modules/.pnpm/vuepress-theme-hope@2.0.0-beta.100/node_modules/vuepress-theme-hope/src/client/modules/encrypt/utils/checkToken.ts", "../../../../node_modules/.pnpm/vuepress-theme-hope@2.0.0-beta.100/node_modules/vuepress-theme-hope/src/client/modules/encrypt/composables/path.ts"],
  "sourcesContent": [null, "export const BCRYPT_SALT_LEN = 16;\n\nexport const GENSALT_DEFAULT_LOG2_ROUNDS = 10;\n\nexport const BLOWFISH_NUM_ROUNDS = 16;\n\nexport const MAX_EXECUTION_TIME = 100;\n\nexport const BASE64_CODE =\n  \"./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".split(\"\");\n\nexport const BASE64_INDEX = [\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\n  -1, -1, -1, -1, -1, -1, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, -1, -1, -1, -1, -1, -1, 28,\n  29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n  48, 49, 50, 51, 52, 53, -1, -1, -1, -1, -1,\n];\n\nexport const P_ORIG = [\n  0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0,\n  0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,\n  0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917, 0x9216d5d9, 0x8979fb1b,\n];\n\nexport const S_ORIG = [\n  0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96,\n  0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,\n  0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e, 0x0d95748f, 0x728eb658,\n  0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,\n  0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e,\n  0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,\n  0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55ca396a, 0x2aab10b6,\n  0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,\n  0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c,\n  0x7a325381, 0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,\n  0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe98575b1,\n  0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,\n  0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a,\n  0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,\n  0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176,\n  0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,\n  0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706,\n  0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,\n  0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b,\n  0x976ce0bd, 0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,\n  0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f, 0x9b30952c,\n  0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,\n  0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a,\n  0xd6a100c6, 0x402c7279, 0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,\n  0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760,\n  0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,\n  0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8,\n  0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,\n  0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33,\n  0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,\n  0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0,\n  0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,\n  0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777,\n  0xea752dfe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,\n  0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705,\n  0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,\n  0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e,\n  0x226800bb, 0x57b8e0af, 0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,\n  0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9,\n  0x11c81968, 0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,\n  0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5, 0x571be91f,\n  0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,\n  0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a, 0x4b7a70e9, 0xb5b32944,\n  0xdb75092e, 0xc4192623, 0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266,\n  0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29,\n  0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6,\n  0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1, 0x4cdd2086, 0x8470eb26,\n  0x6382e9c6, 0x021ecc5e, 0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1,\n  0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c,\n  0x8e7d44ec, 0x5716f2b8, 0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff,\n  0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113f9, 0x7ca92ff6,\n  0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7,\n  0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41, 0xe238cd99, 0x3bea0e2f,\n  0x3280bba1, 0x183eb331, 0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf,\n  0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd9930810,\n  0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87,\n  0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c, 0xec7aec3a, 0xdb851dfa,\n  0x63094366, 0xc464c3d2, 0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16,\n  0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd, 0x71dff89e, 0x10314e55,\n  0x81ac77d6, 0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,\n  0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570, 0xeae96fb1,\n  0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f,\n  0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a, 0xc6150eba, 0x94e2ea78,\n  0xa5fc3c53, 0x1e0a2df4, 0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960,\n  0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883,\n  0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802,\n  0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84, 0x1521b628, 0x29076170,\n  0xecdd4775, 0x619f1510, 0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf,\n  0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7,\n  0x9cab5cab, 0xb2f3846e, 0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50,\n  0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19, 0x875fa099,\n  0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281,\n  0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99, 0x57f584a5, 0x1b227263,\n  0x9b83c3ff, 0x1ac24696, 0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128,\n  0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3,\n  0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0,\n  0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105, 0xd81e799e, 0x86854dc7,\n  0xe44b476a, 0x3d816250, 0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3,\n  0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285, 0x095bbf00, 0xad19489d,\n  0x1462b174, 0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,\n  0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759, 0xcbee7460,\n  0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735,\n  0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc, 0x9e447a2e, 0xc3453484,\n  0xfdd56705, 0x0e1e9ec9, 0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340,\n  0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a,\n  0xe6e39f2b, 0xdb83adf7, 0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934,\n  0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068, 0xd4082471, 0x3320f46a,\n  0x43b7d4b7, 0x500061af, 0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840,\n  0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785,\n  0x7fac6dd0, 0x31cb8504, 0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a,\n  0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb, 0x68dc1462, 0xd7486900,\n  0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6,\n  0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42, 0x20fe9e35, 0xd9f385b9,\n  0xee39d7ab, 0x3b124e8b, 0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2,\n  0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397,\n  0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b,\n  0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33, 0xa62a4a56, 0x3f3125f9,\n  0x5ef47e1c, 0x9029317c, 0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3,\n  0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f,\n  0x404779a4, 0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,\n  0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2, 0x02e1329e,\n  0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922,\n  0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728, 0xd0127845, 0x95b794fd,\n  0x647d0862, 0xe7ccf5f0, 0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e,\n  0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8,\n  0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804,\n  0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b, 0x667b9ffb, 0xcedb7d9c,\n  0xa091cf0b, 0xd9155ea3, 0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb,\n  0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b,\n  0x12754ccc, 0x782ef11c, 0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350,\n  0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659, 0x0a121386,\n  0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe,\n  0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d, 0xd1fd8346, 0xf6381fb0,\n  0x7745ae04, 0xd736fccc, 0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f,\n  0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2,\n  0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9,\n  0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2, 0x466e598e, 0x20b45770,\n  0x8cd55591, 0xc902de4c, 0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e,\n  0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c,\n  0x4a99a025, 0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,\n  0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01, 0xa70683fa,\n  0xa002b5c4, 0x0de6d027, 0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5,\n  0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62, 0x11e69ed7, 0x2338ea63,\n  0x53c2dd94, 0xc2c21634, 0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76,\n  0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9,\n  0x1ac15bb4, 0xd39eb8fc, 0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4,\n  0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c, 0x6fd5c7e7, 0x56e14ec4,\n  0x362abfce, 0xddc6c837, 0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0,\n  0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742,\n  0xd3822740, 0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,\n  0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f, 0xbc946e79,\n  0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,\n  0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304, 0xa1fad5f0, 0x6a2d519a,\n  0x63ef8ce2, 0x9a86ee22, 0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,\n  0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1,\n  0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,\n  0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593, 0xe990fd5a, 0x9e34d797,\n  0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,\n  0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6,\n  0x47b0acfd, 0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,\n  0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4, 0x88f46dba,\n  0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,\n  0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319, 0x7533d928, 0xb155fdf5,\n  0x03563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,\n  0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce,\n  0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,\n  0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166, 0xb39a460a, 0x6445c0dd,\n  0x586cdecf, 0x1c20c8ae, 0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,\n  0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb,\n  0x8d6612ae, 0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,\n  0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08, 0x4eb4e2cc,\n  0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,\n  0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8, 0x611560b1, 0xe7933fdc,\n  0xbb3a792b, 0x344525bd, 0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,\n  0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a,\n  0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,\n  0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c, 0xbf97222c, 0x15e6fc2a,\n  0x0f91fc71, 0x9b941525, 0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,\n  0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b,\n  0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,\n  0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d, 0x9b992f2e,\n  0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,\n  0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299, 0xf523f357, 0xa6327623,\n  0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,\n  0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a,\n  0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,\n  0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b, 0x53113ec0, 0x1640e3d3,\n  0x38abbd60, 0x2547adf0, 0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,\n  0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c,\n  0x01c36ae4, 0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,\n  0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6,\n];\n\nexport const C_ORIG = [\n  0x4f727068, 0x65616e42, 0x65686f6c, 0x64657253, 0x63727944, 0x6f756274,\n];\n", "import { BASE64_CODE, BASE64_INDEX } from \"./constant\";\n\n/**\n * Encodes a byte array to base64 with up to len bytes of input, using the custom bcrypt alphabet.\n *\n * @param byteArray Byte array\n * @param length Maximum input length\n */\nexport const encodeBase64 = (\n  byteArray: number[] | Buffer,\n  length: number\n): string => {\n  if (length <= 0 || length > byteArray.length)\n    throw Error(`Illegal len: ${length}`);\n\n  let off = 0;\n  let c1: number;\n  let c2: number;\n  const rs: string[] = [];\n\n  while (off < length) {\n    c1 = byteArray[off++] & 0xff;\n    rs.push(BASE64_CODE[(c1 >> 2) & 0x3f]);\n    c1 = (c1 & 0x03) << 4;\n    if (off >= length) {\n      rs.push(BASE64_CODE[c1 & 0x3f]);\n      break;\n    }\n    c2 = byteArray[off++] & 0xff;\n    c1 |= (c2 >> 4) & 0x0f;\n    rs.push(BASE64_CODE[c1 & 0x3f]);\n    c1 = (c2 & 0x0f) << 2;\n    if (off >= length) {\n      rs.push(BASE64_CODE[c1 & 0x3f]);\n      break;\n    }\n    c2 = byteArray[off++] & 0xff;\n    c1 |= (c2 >> 6) & 0x03;\n    rs.push(BASE64_CODE[c1 & 0x3f]);\n    rs.push(BASE64_CODE[c2 & 0x3f]);\n  }\n\n  return rs.join(\"\");\n};\n\n/**\n * Decodes a base64 encoded string to up to len bytes of output, using the custom bcrypt alphabet.\n *\n * @param contentString String to decode\n * @param length Maximum output length\n */\nexport const decodeBase64 = (\n  contentString: string,\n  length: number\n): number[] => {\n  if (length <= 0) throw Error(`Illegal len: ${length}`);\n\n  const stringLength = contentString.length;\n  let off = 0;\n  let olen = 0;\n  let c1: number;\n  let c2: number;\n  let c3: number;\n  let c4: number;\n  let o: number;\n  let code: number;\n  const rs: string[] = [];\n\n  while (off < stringLength - 1 && olen < length) {\n    code = contentString.charCodeAt(off++);\n    c1 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n    code = contentString.charCodeAt(off++);\n    c2 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n\n    if (c1 == -1 || c2 == -1) break;\n\n    o = (c1 << 2) >>> 0;\n    o |= (c2 & 0x30) >> 4;\n    rs.push(String.fromCharCode(o));\n\n    if (++olen >= length || off >= stringLength) break;\n\n    code = contentString.charCodeAt(off++);\n    c3 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n    if (c3 == -1) break;\n    o = ((c2 & 0x0f) << 4) >>> 0;\n    o |= (c3 & 0x3c) >> 2;\n    rs.push(String.fromCharCode(o));\n\n    if (++olen >= length || off >= stringLength) break;\n\n    code = contentString.charCodeAt(off++);\n    c4 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;\n    o = ((c3 & 0x03) << 6) >>> 0;\n    o |= c4;\n    rs.push(String.fromCharCode(o));\n\n    ++olen;\n  }\n\n  return rs.map((item) => item.charCodeAt(0));\n};\n", "import { encodeUTF16toUTF8 } from \"./utfx\";\n\n/**\n * Continues with the callback on the next tick.\n */\nexport const nextTick =\n  typeof process !== \"undefined\" &&\n  process &&\n  typeof process.nextTick === \"function\"\n    ? typeof setImmediate === \"function\"\n      ? setImmediate\n      : // eslint-disable-next-line @typescript-eslint/unbound-method\n        process.nextTick\n    : setTimeout;\n\n/**\n * Converts a JavaScript string to UTF8 bytes.\n * @param {string} str String\n * @returns {!Array.<number>} UTF8 bytes\n * @inner\n */\n\nexport const stringToBytes = (str: string): number[] => {\n  const out: number[] = [];\n  let i = 0;\n\n  encodeUTF16toUTF8(\n    () => (i >= str.length ? null : str.charCodeAt(i++)),\n    (b: number) => {\n      out.push(b);\n    }\n  );\n\n  return out;\n};\n", "import {\n  BCRYPT_SALT_LEN,\n  BLOWFISH_NUM_ROUNDS,\n  MAX_EXECUTION_TIME,\n  C_ORIG,\n  P_ORIG,\n  S_ORIG,\n} from \"./constant\";\nimport { nextTick } from \"./utils\";\n\n// A base64 implementation for the bcrypt algorithm. This is partly non-standard.\n\nconst encipher = (\n  lr: number[],\n  off: number,\n  P: Int32Array | number[],\n  S: Int32Array | number[]\n): number[] => {\n  // This is our bottleneck: 1714/1905 ticks / 90% - see profile.txt\n  let n: number;\n  let l = lr[off];\n  let r = lr[off + 1];\n\n  l ^= P[0];\n\n  //The following is an unrolled version of the above loop.\n  //Iteration 0\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[1];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[2];\n  //Iteration 1\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[3];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[4];\n  //Iteration 2\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[5];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[6];\n  //Iteration 3\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[7];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[8];\n  //Iteration 4\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[9];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[10];\n  //Iteration 5\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[11];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[12];\n  //Iteration 6\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[13];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[14];\n  //Iteration 7\n  n = S[l >>> 24];\n  n += S[0x100 | ((l >> 16) & 0xff)];\n  n ^= S[0x200 | ((l >> 8) & 0xff)];\n  n += S[0x300 | (l & 0xff)];\n  r ^= n ^ P[15];\n  n = S[r >>> 24];\n  n += S[0x100 | ((r >> 16) & 0xff)];\n  n ^= S[0x200 | ((r >> 8) & 0xff)];\n  n += S[0x300 | (r & 0xff)];\n  l ^= n ^ P[16];\n\n  lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];\n  lr[off + 1] = l;\n\n  return lr;\n};\n\nconst streamtoword = (\n  data: number[],\n  offp: number\n): { key: number; offp: number } => {\n  let word = 0;\n\n  for (let i = 0; i < 4; ++i)\n    (word = (word << 8) | (data[offp] & 0xff)),\n      (offp = (offp + 1) % data.length);\n\n  return { key: word, offp: offp };\n};\n\nconst key = (\n  key: number[],\n  P: Int32Array | number[],\n  S: Int32Array | number[]\n): void => {\n  const pLength = P.length;\n  const sLength = S.length;\n  let offp = 0;\n  let lr = [0, 0];\n  let sw: {\n    key: number;\n    offp: number;\n  };\n\n  for (let i = 0; i < pLength; i++)\n    (sw = streamtoword(key, offp)), (offp = sw.offp), (P[i] = P[i] ^ sw.key);\n\n  for (let i = 0; i < pLength; i += 2)\n    (lr = encipher(lr, 0, P, S)), (P[i] = lr[0]), (P[i + 1] = lr[1]);\n\n  for (let i = 0; i < sLength; i += 2)\n    (lr = encipher(lr, 0, P, S)), (S[i] = lr[0]), (S[i + 1] = lr[1]);\n};\n\n/**\n * Expensive key schedule Blowfish.\n */\nconst ekskey = (\n  data: number[],\n  key: number[],\n  P: Int32Array | number[],\n  S: Int32Array | number[]\n): void => {\n  const pLength = P.length;\n  const sLength = S.length;\n  let offp = 0;\n  let lr = [0, 0];\n  let sw: {\n    key: number;\n    offp: number;\n  };\n\n  for (let i = 0; i < pLength; i++)\n    (sw = streamtoword(key, offp)), (offp = sw.offp), (P[i] = P[i] ^ sw.key);\n\n  offp = 0;\n\n  for (let i = 0; i < pLength; i += 2)\n    (sw = streamtoword(data, offp)),\n      (offp = sw.offp),\n      (lr[0] ^= sw.key),\n      (sw = streamtoword(data, offp)),\n      (offp = sw.offp),\n      (lr[1] ^= sw.key),\n      (lr = encipher(lr, 0, P, S)),\n      (P[i] = lr[0]),\n      (P[i + 1] = lr[1]);\n\n  for (let i = 0; i < sLength; i += 2)\n    (sw = streamtoword(data, offp)),\n      (offp = sw.offp),\n      (lr[0] ^= sw.key),\n      (sw = streamtoword(data, offp)),\n      (offp = sw.offp),\n      (lr[1] ^= sw.key),\n      (lr = encipher(lr, 0, P, S)),\n      (S[i] = lr[0]),\n      (S[i + 1] = lr[1]);\n};\n\n/**\n * Internaly crypts a string.\n *\n * @param bytes Bytes to crypt\n * @param salt Salt bytes to use\n * @param rounds Number of rounds\n * @param progressCallback Callback called with the current progress\n */\nexport const crypt = (\n  bytes: number[],\n  salt: number[],\n  rounds: number,\n  sync: boolean,\n  progressCallback?: (progress: number) => void\n): Promise<number[]> | number[] => {\n  const cdata = C_ORIG.slice();\n  const cLength = cdata.length;\n\n  // Validate\n  if (rounds < 4 || rounds > 31) {\n    const err = new Error(`Illegal number of rounds (4-31): ${rounds}`);\n\n    if (sync === false) return Promise.reject(err);\n\n    throw err;\n  }\n\n  if (salt.length !== BCRYPT_SALT_LEN) {\n    const err = new Error(\n      `Illegal salt length: ${salt.length} != ${BCRYPT_SALT_LEN}`\n    );\n\n    if (sync === false) return Promise.reject(err);\n\n    throw err;\n  }\n\n  rounds = (1 << rounds) >>> 0;\n\n  let P: Int32Array | number[];\n  let S: Int32Array | number[];\n  let i = 0;\n  let j: number;\n\n  //Use typed arrays when available - huge speedup!\n  if (Int32Array) {\n    P = new Int32Array(P_ORIG);\n    S = new Int32Array(S_ORIG);\n  } else {\n    P = P_ORIG.slice();\n    S = S_ORIG.slice();\n  }\n\n  ekskey(salt, bytes, P, S);\n\n  /**\n   * Calcualtes the next round.\n   */\n  const next = (): Promise<number[] | undefined> | number[] | void => {\n    if (progressCallback) progressCallback(i / rounds);\n\n    if (i < rounds) {\n      const start = Date.now();\n\n      for (; i < rounds; ) {\n        i = i + 1;\n        key(bytes, P, S);\n        key(salt, P, S);\n        if (Date.now() - start > MAX_EXECUTION_TIME) break;\n      }\n    } else {\n      for (i = 0; i < 64; i++)\n        for (j = 0; j < cLength >> 1; j++) encipher(cdata, j << 1, P, S);\n      const ret: number[] = [];\n\n      for (i = 0; i < cLength; i++)\n        ret.push(((cdata[i] >> 24) & 0xff) >>> 0),\n          ret.push(((cdata[i] >> 16) & 0xff) >>> 0),\n          ret.push(((cdata[i] >> 8) & 0xff) >>> 0),\n          ret.push((cdata[i] & 0xff) >>> 0);\n\n      if (sync === false) return Promise.resolve(ret);\n\n      return ret;\n    }\n\n    if (sync === false)\n      return new Promise((resolve) =>\n        nextTick(() => {\n          void (next() as Promise<number[] | undefined>).then(resolve);\n        })\n      );\n  };\n\n  if (sync === false) return next() as Promise<number[]>;\n  else {\n    let res;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true)\n      if (typeof (res = next()) !== \"undefined\") return (res as number[]) || [];\n  }\n};\n", "import { BCRYPT_SALT_LEN, GENSALT_DEFAULT_LOG2_ROUNDS } from \"./constant\";\nimport { encodeBase64 } from \"./base64\";\nimport { nextTick } from \"./utils\";\nimport { random } from \"@random\";\n\n/**\n * Synchronously generates a salt.\n *\n * @param rounds Number of rounds to use, defaults to 10 if omitted\n * @returns Resulting salt\n * @throws {Error} If a random fallback is required but not set\n */\nexport const genSaltSync = (rounds = GENSALT_DEFAULT_LOG2_ROUNDS): string => {\n  if (typeof rounds !== \"number\")\n    throw Error(\"Illegal arguments: \" + typeof rounds);\n  if (rounds < 4) rounds = 4;\n  else if (rounds > 31) rounds = 31;\n\n  const salt = [];\n\n  salt.push(\"$2a$\");\n  if (rounds < 10) salt.push(\"0\");\n  salt.push(rounds.toString());\n  salt.push(\"$\");\n  salt.push(encodeBase64(random(BCRYPT_SALT_LEN), BCRYPT_SALT_LEN)); // May throw\n\n  return salt.join(\"\");\n};\n\n/**\n * Asynchronously generates a salt.\n *\n * @param rounds Number of rounds to use, defaults to 10 if omitted\n */\nexport const genSalt = (\n  rounds = GENSALT_DEFAULT_LOG2_ROUNDS\n): Promise<string> => {\n  if (typeof rounds !== \"number\")\n    throw Error(\"illegal arguments: \" + typeof rounds);\n\n  return new Promise((resolve, reject) =>\n    nextTick(() => {\n      // Pretty thin, but salting is fast enough\n      try {\n        resolve(genSaltSync(rounds));\n      } catch (err) {\n        reject(err);\n      }\n    })\n  );\n};\n", "/**\n * Generates cryptographically secure random bytes.\n *\n * @param length Bytes length\n * @returns Random bytes\n * @throws {Error} If no random implementation is available\n */\nexport const random = (length: number): number[] => {\n  try {\n    let array: Uint32Array;\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    (self[\"crypto\"] || self[\"msCrypto\"])[\"getRandomValues\"](\n      (array = new Uint32Array(length))\n    );\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return Array.prototype.slice.call(array);\n  } catch (err) {\n    throw Error(\"WebCryptoAPI is not available\");\n  }\n};\n", "import { encodeBase64, decodeBase64 } from \"./base64\";\nimport {\n  BCRYPT_SALT_LEN,\n  C_ORIG,\n  GENSALT_DEFAULT_LOG2_ROUNDS,\n} from \"./constant\";\nimport { crypt } from \"./crypt\";\nimport { genSalt, genSaltSync } from \"./salt\";\nimport { stringToBytes } from \"./utils\";\n\n/**\n * Internally hashes a string.\n *\n * @param contentString String to hash\n * @param salt Salt to use, actually never null\n * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash. If omitted,\n *  hashing is performed synchronously.\n *  @param {function(number)=} progressCallback Callback called with the current progress\n * @returns {string|undefined} Resulting hash if callback has been omitted, otherwise `undefined`\n * @inner\n */\nfunction _hash(\n  contentString: string,\n  salt: string,\n  sync: boolean,\n  progressCallback?: (progress: number) => void\n): Promise<string> | string {\n  if (typeof contentString !== \"string\" || typeof salt !== \"string\") {\n    const err = new Error(\"Invalid string / salt: Not a string\");\n\n    if (sync === false) return Promise.reject(err);\n\n    throw err;\n  }\n\n  // Validate the salt\n  let minor: string;\n  let offset: number;\n\n  if (salt.charAt(0) !== \"$\" || salt.charAt(1) !== \"2\") {\n    const err = new Error(\"Invalid salt version: \" + salt.substring(0, 2));\n\n    if (sync === false) return Promise.reject(err);\n\n    throw err;\n  }\n  if (salt.charAt(2) === \"$\") (minor = String.fromCharCode(0)), (offset = 3);\n  else {\n    minor = salt.charAt(2);\n    if (\n      (minor !== \"a\" && minor !== \"b\" && minor !== \"y\") ||\n      salt.charAt(3) !== \"$\"\n    ) {\n      const err = Error(\"Invalid salt revision: \" + salt.substring(2, 4));\n\n      if (sync === false) return Promise.reject(err);\n\n      throw err;\n    }\n    offset = 4;\n  }\n\n  // Extract number of rounds\n  if (salt.charAt(offset + 2) > \"$\") {\n    const err = new Error(\"Missing salt rounds\");\n\n    if (sync === false) return Promise.reject(err);\n\n    throw err;\n  }\n\n  const r1 = parseInt(salt.substring(offset, offset + 1), 10) * 10,\n    r2 = parseInt(salt.substring(offset + 1, offset + 2), 10),\n    rounds = r1 + r2,\n    realSalt = salt.substring(offset + 3, offset + 25);\n\n  contentString += minor >= \"a\" ? \"\\x00\" : \"\";\n\n  const passwordBytes = stringToBytes(contentString),\n    saltBytes = decodeBase64(realSalt, BCRYPT_SALT_LEN);\n\n  /**\n   * Finishes hashing.\n   * @param bytes Byte array\n   */\n  const finish = (bytes: number[]): string => {\n    const res = [];\n\n    res.push(\"$2\");\n    if (minor >= \"a\") res.push(minor);\n    res.push(\"$\");\n    if (rounds < 10) res.push(\"0\");\n    res.push(rounds.toString());\n    res.push(\"$\");\n    res.push(encodeBase64(saltBytes, saltBytes.length));\n    res.push(encodeBase64(bytes, C_ORIG.length * 4 - 1));\n\n    return res.join(\"\");\n  };\n\n  // Sync\n  if (sync === false)\n    return (\n      crypt(\n        passwordBytes,\n        saltBytes,\n        rounds,\n        false,\n        progressCallback\n      ) as Promise<number[]>\n    ).then((bytes) => finish(bytes));\n\n  return finish(\n    crypt(passwordBytes, saltBytes, rounds, true, progressCallback) as number[]\n  );\n}\n\n/**\n * Synchronously generates a hash for the given string.\n *\n * @param contentString String to hash\n * @param salt Salt length to generate or salt to use, default to 10\n * @returns Resulting hash\n */\nexport const hashSync = (\n  contentString: string,\n  salt: string | number = GENSALT_DEFAULT_LOG2_ROUNDS\n): string => {\n  if (typeof salt === \"number\") salt = genSaltSync(salt);\n  if (typeof contentString !== \"string\" || typeof salt !== \"string\")\n    throw Error(\n      \"Illegal arguments: \" + typeof contentString + \", \" + typeof salt\n    );\n\n  return _hash(contentString, salt, true) as string;\n};\n\n/**\n * Asynchronously generates a hash for the given string.\n *\n * @param contentString String to hash\n * @param salt Salt length to generate or salt to use\n * @param progressCallback Callback successively called with the percentage of rounds completed\n *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\n */\nexport const hash = function (\n  contentString: string,\n  salt: number | string,\n  progressCallback?: (progress: number) => void\n): Promise<string> {\n  if (typeof contentString === \"string\" && typeof salt === \"number\")\n    return genSalt(salt).then(\n      (salt) =>\n        _hash(contentString, salt, false, progressCallback) as Promise<string>\n    );\n\n  if (typeof contentString === \"string\" && typeof salt === \"string\")\n    return _hash(\n      contentString,\n      salt,\n      false,\n      progressCallback\n    ) as Promise<string>;\n\n  return Promise.reject(\n    new Error(`Illegal arguments: ${typeof contentString}, ${typeof salt}`)\n  );\n};\n", "/**\n * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>\n * Released under the Apache License, Version 2.0\n * see: https://github.com/dcodeIO/utfx for details\n */\n\nexport const MAX_CODEPOINT = 0x10ffff;\n\n/**\n * Encodes UTF8 code points to UTF8 bytes.\n * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\n *  respectively `null` if there are no more code points left or a single numeric code point.\n * @param {!function(number)} dst Bytes destination as a function successively called with the next byte\n */\nexport const encodeUTF8 = (\n  src: number | (() => number | null),\n  dst: (byte: number) => void\n): void => {\n  let cp = null;\n\n  if (typeof src === \"number\") (cp = src), (src = (): null => null);\n\n  while (cp !== null || (cp = src()) !== null) {\n    if (cp < 0x80) dst(cp & 0x7f);\n    else if (cp < 0x800)\n      dst(((cp >> 6) & 0x1f) | 0xc0), dst((cp & 0x3f) | 0x80);\n    else if (cp < 0x10000)\n      dst(((cp >> 12) & 0x0f) | 0xe0),\n        dst(((cp >> 6) & 0x3f) | 0x80),\n        dst((cp & 0x3f) | 0x80);\n    else\n      dst(((cp >> 18) & 0x07) | 0xf0),\n        dst(((cp >> 12) & 0x3f) | 0x80),\n        dst(((cp >> 6) & 0x3f) | 0x80),\n        dst((cp & 0x3f) | 0x80);\n    cp = null;\n  }\n};\n\n/**\n * Decodes UTF8 bytes to UTF8 code points.\n *\n * @param src Bytes source as a function returning the next byte respectively `null` if there\n *  are no more bytes left.\n * @param dst Code points destination as a function successively called with each decoded code point.\n * @throws {RangeError} If a starting byte is invalid in UTF8\n * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the\n *  remaining bytes.\n */\nexport const decodeUTF8 = (\n  src: () => number | null,\n  dst: (byte: number) => void\n): void => {\n  let a: number | null;\n  let b: number | null;\n  let c: number | null;\n  let d: number | null;\n\n  const fail = (b: (number | null)[]): void => {\n    b = b.slice(0, b.indexOf(null));\n\n    const err = Error(b.toString());\n\n    err.name = \"TruncatedError\";\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    err[\"bytes\"] = b;\n\n    throw err;\n  };\n\n  while ((a = src()) !== null) {\n    if ((a & 0x80) === 0) dst(a);\n    else if ((a & 0xe0) === 0xc0)\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      (b = src()) === null && fail([a, b]), dst(((a & 0x1f) << 6) | (b & 0x3f));\n    else if ((a & 0xf0) === 0xe0)\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      ((b = src()) === null || (c = src()) === null) && fail([a, b, c]),\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        dst(((a & 0x0f) << 12) | ((b & 0x3f) << 6) | (c & 0x3f));\n    else if ((a & 0xf8) === 0xf0)\n      ((b = src()) === null || (c = src()) === null || (d = src()) === null) &&\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        fail([a, b, c, d]),\n        dst(\n          ((a & 0x07) << 18) |\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            ((b & 0x3f) << 12) |\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            ((c & 0x3f) << 6) |\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            (d & 0x3f)\n        );\n    else throw RangeError(`Illegal starting byte: ${a}`);\n  }\n};\n\n/**\n * Converts UTF16 characters to UTF8 code points.\n * @param {!function():number|null} src Characters source as a function returning the next char code respectively\n *  `null` if there are no more characters left.\n * @param {!function(number)} dst Code points destination as a function successively called with each converted code\n *  point.\n */\nexport const UTF16toUTF8 = (\n  src: () => number | null,\n  dst: (byte: number) => void\n): void => {\n  let c1: number | null;\n  let c2 = null;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if ((c1 = c2 !== null ? c2 : src()) === null) break;\n    if (c1 >= 0xd800 && c1 <= 0xdfff) {\n      if ((c2 = src()) !== null) {\n        if (c2 >= 0xdc00 && c2 <= 0xdfff) {\n          dst((c1 - 0xd800) * 0x400 + c2 - 0xdc00 + 0x10000);\n          c2 = null;\n          continue;\n        }\n      }\n    }\n    dst(c1);\n  }\n  if (c2 !== null) dst(c2);\n};\n\n/**\n * Converts UTF8 code points to UTF16 characters.\n *\n * @param src Code points source, either as a function returning the next code point\n *  respectively `null` if there are no more code points left or a single numeric code point.\n * @param dst Characters destination as a function successively called with each converted char code.\n * @throws {RangeError} If a code point is out of range\n */\nexport const UTF8toUTF16 = (\n  src: (() => number | null) | number,\n  dst: (byte: number) => void\n): void => {\n  let cp = null;\n\n  if (typeof src === \"number\") (cp = src), (src = (): null => null);\n\n  while (cp !== null || (cp = src()) !== null) {\n    if (cp <= 0xffff) dst(cp);\n    else (cp -= 0x10000), dst((cp >> 10) + 0xd800), dst((cp % 0x400) + 0xdc00);\n    cp = null;\n  }\n};\n\n/**\n * Converts and encodes UTF16 characters to UTF8 bytes.\n * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`\n *  if there are no more characters left.\n * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.\n */\nexport const encodeUTF16toUTF8 = (\n  src: () => number | null,\n  dst: (byte: number) => void\n): void => {\n  UTF16toUTF8(src, function (cp) {\n    encodeUTF8(cp, dst);\n  });\n};\n\n/**\n * Decodes and converts UTF8 bytes to UTF16 characters.\n * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\n *  are no more bytes left.\n * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\n * @throws {RangeError} If a starting byte is invalid in UTF8\n * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.\n */\nexport const decodeUTF8toUTF16 = (\n  src: () => number | null,\n  dst: (byte: number) => void\n): void => {\n  decodeUTF8(src, (cp) => {\n    UTF8toUTF16(cp, dst);\n  });\n};\n\n/**\n * Calculates the byte length of an UTF8 code point.\n *\n * @param codePoint UTF8 code point\n * @returns Byte length\n */\nexport const calculateCodePoint = (codePoint: number): number =>\n  codePoint < 0x80 ? 1 : codePoint < 0x800 ? 2 : codePoint < 0x10000 ? 3 : 4;\n\n/**\n * Calculates the number of UTF8 bytes required to store UTF8 code points.\n * @param src Code points source as a function returning the next code point respectively\n *  `null` if there are no more code points left.\n * @returns The number of UTF8 bytes required\n */\nexport const calculateUTF8 = (src: () => number | null): number => {\n  let cp: number | null;\n  let l = 0;\n\n  while ((cp = src()) !== null) l += calculateCodePoint(cp);\n\n  return l;\n};\n\n/**\n * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.\n * @param src Characters source as a function returning the next char code respectively\n *  `null` if there are no more characters left.\n * @returns The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.\n */\nexport const calculateUTF16asUTF8 = (src: () => number | null): number[] => {\n  let n = 0,\n    l = 0;\n\n  UTF16toUTF8(src, function (cp) {\n    ++n;\n    l += calculateCodePoint(cp);\n  });\n\n  return [n, l];\n};\n", "import { hash as hashAsync, hashSync } from \"./hash\";\nimport { nextTick } from \"./utils\";\n\n/**\n * Synchronously tests a string against a hash.\n *\n * @param content String to compare\n * @param hash Hash to test against\n */\nexport const compareSync = (content: string, hash: string): boolean => {\n  if (typeof content !== \"string\" || typeof hash !== \"string\")\n    throw Error(\"Illegal arguments: \" + typeof content + \", \" + typeof hash);\n  if (hash.length !== 60) return false;\n\n  return hashSync(content, hash.substring(0, hash.length - 31)) === hash;\n};\n\n/**\n * Asynchronously compares the given data against the given hash.\n *\n * @param content Data to compare\n * @param hash Data to be compared to\n * @param progressCallback Callback successively called with the percentage of rounds completed\n *  (0.0 - 1.0), maximally once per `MAX_EXECUTION_TIME = 100` ms.\n */\nexport const compare = (\n  content: string,\n  hash: string,\n  progressCallback?: (percent: number) => void\n): Promise<boolean> =>\n  new Promise((resolve, reject) => {\n    if (typeof content !== \"string\" || typeof hash !== \"string\") {\n      nextTick(() =>\n        reject(\n          new Error(`Illegal arguments: ${typeof content}, ${typeof hash}`)\n        )\n      );\n\n      return;\n    }\n\n    if (hash.length !== 60) {\n      nextTick(() => reject(false));\n\n      return;\n    }\n\n    hashAsync(content, hash.substring(0, 29), progressCallback)\n      .then((comp) => resolve(comp === hash))\n      .catch((err) => reject(err));\n  });\n", "/**\n * Gets the number of rounds used to encrypt the specified hash.\n *\n * @param hash Hash to extract the used number of rounds from\n * @returns Number of rounds used\n * @throws {Error} If `hash` is not a string\n */\nexport const getRounds = (hash: string): number => {\n  if (typeof hash !== \"string\")\n    throw new Error(`Illegal arguments: ${typeof hash}`);\n\n  return parseInt(hash.split(\"$\")[2], 10);\n};\n\n/**\n * Gets the salt portion from a hash. Does not validate the hash.\n *\n * @param hash Hash to extract the salt from\n * @returns Extracted salt part\n * @throws {Error} If `hash` is not a string or otherwise invalid\n */\nexport const getSalt = (hash: string): string => {\n  if (typeof hash !== \"string\")\n    throw new Error(`Illegal arguments: ${typeof hash}`);\n\n  if (hash.length !== 60)\n    throw new Error(`Illegal hash length: ${hash.length} != 60`);\n\n  return hash.substring(0, 29);\n};\n", null, null, null, null],
  "mappings": "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YAAY,WAAY,WAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,WAAY,YAAY,WAAY,YAC5D,WAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,WAAY,YAAY,YAAY,YAAY,WAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,WAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,WAC5D,WAAY,YAAY,WAAY,YAAY,YAAY,YAC5D,WAAY,YAAY,WAAY,YAAY,YAAY,YAC5D,YAAY,UAAY,YAAY,YAAY,YAAY,WAC5D,YAAY,YAAY,WAAY,WAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,WAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,WAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,WAAY,YAAY,WAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,YAAY,WAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,WAAY,YAAY,YAAY,WAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,WAAY,YAAY,WAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,YAAY,WAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,SAAY,WAC5D,WAAY,YAAY,WAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,WAAY,UAAY,YAAY,YAC5D,WAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,YAAY,YAAY,WAAY,YAAY,WAAY,YAC5D,YAAY,WAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,WAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,UAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,UAAY,WAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,UAC5D,YAAY,YAAY,WAAY,YAAY,YAAY,YAC5D,YAAY,WAAY,WAAY,WAAY,YAAY,YAC5D,YAAY,WAAY,YAAY,YAAY,YAAY,YAC5D,WAAY,WAAY,YAAY,YAAY,YAAY,YAC5D,WAAY,WAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,WAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,WAAY,YAAY,WAC5D,WAAY,WAAY,YAAY,WAAY,YAAY,WAC5D,YAAY,YAAY,UAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,WAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,YAAY,YAAY,WAAY,YAAY,YAAY,YAC5D,YAAY,WAAY,YAAY,WAAY,WAAY,WAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,UAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,WAAY,YAAY,WAAY,WAC5D,YAAY,YAAY,WAAY,YAAY,UAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,WAAY,YAAY,YAC5D,YAAY,YAAY,WAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,WAAY,WAC5D,WAAY,YAAY,YAAY,YAAY,YAAY,WAC5D,YAAY,WAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,WAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,WAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,WAAY,WAAY,YAAY,WAAY,WAAY,WAC5D,WAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,WAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,WAAY,YAAY,WAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,WAC5D,YAAY,YAAY,WAAY,YAAY,WAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,UAC5D,YAAY,WAAY,YAAY,YAAY,YAAY,YAC5D,WAAY,YAAY,WAAY,YAAY,YAAY,YAC5D,YAAY,WAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,YAAY,WAAY,WAAY,YAAY,WAAY,YAC5D,WAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,WAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,UAAY,YAAY,UAC5D,YAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,YAAY,YAAY,WAAY,YAAY,YAAY,YAC5D,WAAY,YAAY,YAAY,WAAY,WAAY,UAC5D,YAAY,YAAY,YAAY,WAAY,WAAY,YAC5D,YAAY,YAAY,YAAY,WAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,WAAY,YAAY,WAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,WAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,WAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,WAAY,WAAY,YAAY,YAAY,YAAY,WAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,WAC5D,YAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,WAC5D,YAAY,WAAY,WAAY,WAAY,YAAY,WAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,WAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,SAAY,WAAY,WAAY,WAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,WAAY,YAAY,YAAY,YAC5D,WAAY,YAAY,YAAY,WAAY,YAAY,YAC5D,WAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,WAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,WAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,WAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,WAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,WAAY,YAAY,YAC5D,WAAY,UAAY,YAAY,UAAY,YAAY,YAC5D,WAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,WAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,UAAY,UAAY,YAAY,YAAY,YAAY,YAC5D,WAAY,WAAY,YAAY,WAAY,YAAY,YAC5D,UAAY,YAAY,WAAY,YAAY,YAAY,YAC5D,YAAY,WAAY,WAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,WAAY,YAAY,YAC5D,YAAY,WAAY,YAAY,WAAY,YAAY,YAC5D,YAAY,WAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,WAAY,UAAY,WAAY,YAAY,WAAY,YAC5D,YAAY,WAAY,UAAY,WAAY,YAAY,YAC5D,YAAY,WAAY,YAAY,YAAY,WAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,WAAY,YAC5D,YAAY,YAAY,UAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,WAAY,YAAY,WAC5D,WAAY,YAAY,YAAY,YAAY,YAAY,WAC5D,YAAY,YAAY,WAAY,YAAY,YAAY,WAC5D,YAAY,WAAY,YAAY,YAAY,YAAY,YAC5D,WAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,WAAY,YAAY,WAAY,YAAY,YAC5D,WAAY,YAAY,YAAY,YAAY,YAAY,YAC5D,YAAY,YAAY,YAAY,YAAY,YAAY,Y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",
  "names": ["BASE64_CODE", "split", "BASE64_INDEX", "P_ORIG", "S_ORIG", "C_ORIG", "encodeBase64", "byteArray", "length", "Error", "c1", "c2", "off", "rs", "push", "join", "decodeBase64", "contentString", "stringLength", "c3", "c4", "o", "code", "olen", "charCodeAt", "String", "fromCharCode", "map", "item", "nextTick", "process", "setImmediate", "setTimeout", "encipher", "lr", "P", "S", "n", "l", "r", "BLOWFISH_NUM_ROUNDS", "streamtoword", "data", "offp", "word", "i", "key", "pLength", "sLength", "sw", "crypt", "bytes", "salt", "rounds", "sync", "progressCallback", "cdata", "slice", "cLength", "err", "Promise", "reject", "j", "Int32Array", "next", "ret", "resolve", "start", "Date", "now", "then", "res", "genSaltSync", "toString", "array", "self", "Uint32Array", "Array", "prototype", "call", "_hash", "contentString", "salt", "sync", "progressCallback", "err", "Error", "Promise", "reject", "minor", "offset", "charAt", "substring", "String", "fromCharCode", "rounds", "parseInt", "realSalt", "passwordBytes", "str", "out", "i", "dst", "b", "push", "src", "c1", "c2", "length", "charCodeAt", "cp", "saltBytes", "decodeBase64", "finish", "bytes", "res", "toString", "encodeBase64", "C_ORIG", "join", "crypt", "then", "hashSync", "genSaltSync", "compareSync", "content", "hash", "Error", "length", "hashSync", "substring", "STORAGE_KEY", "a"]
}
