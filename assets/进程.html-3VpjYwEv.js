import{_ as d}from"./plugin-vueexport-helper-DlAUqK2U.js";import{c as u,d as i,a as n,b as o,e as l,w as e,r as s,o as g}from"./app-BSKYQGO5.js";const m="/assets/CPU%E5%B9%B6%E5%8F%91%E5%92%8C%E5%B9%B6%E8%A1%8C-ClioYBKv.png",f={};function y(B,t){const p=s("Font"),r=s("Badge"),a=s("Alert");return g(),u("div",null,[t[27]||(t[27]=i('<p>操作系统进程相关</p><p>首先讨论进程前先要弄清 <strong>并行</strong> 和 <strong>并发</strong> 两个概念</p><h2 id="_1-并行与并发" tabindex="-1"><a class="header-anchor" href="#_1-并行与并发"><span>1. 并行与并发</span></a></h2><h3 id="_1-1-并行" tabindex="-1"><a class="header-anchor" href="#_1-1-并行"><span>1.1 并行</span></a></h3><ul><li>当计算资源有多个 CPU 时，或一个 CPU 有多核多线程时，每一个 CPU 的线程在同一时刻，都能执行一个进程</li><li>两个 CPU 线程同一时刻，可以 <strong>同时执行</strong> 两个不同的进程，且不会相互抢夺资源，这种方式即为并行</li><li><strong>并行不一定并发</strong>，也有同步&amp;异步，并行也会阻塞，但异步往往可以提高效率</li></ul><h3 id="_1-2-并发" tabindex="-1"><a class="header-anchor" href="#_1-2-并发"><span>1.2 并发</span></a></h3><ul><li>若只用单 CPU、单核、单线程当做计算资源时，虽然 CPU 的线程在 <strong>同一时刻</strong> 时只能调度一个进程，但在 <strong>一段时间</strong> 内，却能执行不同的 进程 / 线程</li><li>并发通常使用 <strong>切片轮询</strong> 的执行方式，快速交替执行，来 <strong>伪造</strong> 出多个进程同时执行的效果</li><li>并行只在多处理器资源中存在，而并发在各种处理系统中存在</li></ul><img src="'+m+'"><h2 id="_2-什么是进程" tabindex="-1"><a class="header-anchor" href="#_2-什么是进程"><span>2. 什么是进程</span></a></h2>',9)),n("p",null,[t[1]||(t[1]=n("strong",null,[o("进程（"),n("em",null,"Process"),o("）：")],-1)),t[2]||(t[2]=o(" 狭义理解，是 ")),t[3]||(t[3]=n("strong",null,"OS",-1)),t[4]||(t[4]=o(" 即操作系统资源分配的")),l(p,{type:"success"},{default:e(()=>t[0]||(t[0]=[o("基本单位")])),_:1})]),t[28]||(t[28]=n("h3",{id:"_2-1-进程相关的基本概念",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-1-进程相关的基本概念"},[n("span",null,"2.1 进程相关的基本概念")])],-1)),n("ol",null,[t[26]||(t[26]=n("li",null,[n("p",null,[n("strong",null,"程序"),o("：是指令的集合，不能单独运行，要装载到内存中("),n("code",null,"分配内存"),o("),并需要系统为它分配资源("),n("code",null,"分配执行环境"),o(")")])],-1)),n("li",null,[t[20]||(t[20]=n("p",null,[n("strong",null,"进程"),o("：具有独立功能的程序，关于某个数据集合上的，一次执行程序的活动（动态概念）。是系统进行"),n("code",null,"资源管理分配"),o("和"),n("code",null,"调度"),o("的独立单位 "),n("strong",null,"这种可被执行的程序，称为进程")],-1)),l(p,{type:"orange",fsize:"l"},{default:e(()=>t[5]||(t[5]=[o("进程")])),_:1}),t[21]||(t[21]=o(" = ")),l(r,{type:"info"},{default:e(()=>t[6]||(t[6]=[o("程序")])),_:1}),t[22]||(t[22]=o(" ＋ ")),l(r,{type:"error"},{default:e(()=>t[7]||(t[7]=[o("数据")])),_:1}),t[23]||(t[23]=o(" ＋ ")),l(r,{type:"queen"},{default:e(()=>t[8]||(t[8]=[o("PCB")])),_:1}),n("ul",null,[n("li",null,[l(r,{type:"info"},{default:e(()=>t[9]||(t[9]=[o("程序")])),_:1}),t[10]||(t[10]=o("：描述了进程所要完成的功能（")),t[11]||(t[11]=n("code",null,"静态描述文本",-1)),t[12]||(t[12]=o("）")),t[13]||(t[13]=n("blockquote",null,[n("p",null,"理解为代码、做菜的菜谱、说明书...... 而进程就是执行代码的过程、做菜的过程、按照说明书操作的过程...")],-1))]),n("li",null,[l(r,{type:"error"},{default:e(()=>t[14]||(t[14]=[o("数据")])),_:1}),t[15]||(t[15]=o("：是程序在执行时所需要的数据和工作区，这两部分是进程存在的物质基础。"))]),n("li",null,[l(r,{type:"queen"},{default:e(()=>t[16]||(t[16]=[o("PCB")])),_:1}),t[17]||(t[17]=o("：是最重要的，创建进程实际上是指创建进程实体中的")),t[18]||(t[18]=n("code",null,"进程控制块",-1)),t[19]||(t[19]=o("，而撤销进程也是指将这个进程实体中的进程控制块撤消掉。"))])])]),n("li",null,[t[25]||(t[25]=n("p",null,[n("strong",null,"多道编程"),o("：允许"),n("strong",null,"多个程序同时加载到内存中"),o("，在操作系统的调度下，可以实现并发地执行。这是这样的设计，大大提高了 CPU 的利用率。")],-1)),l(a,{type:"info"},{default:e(()=>t[24]||(t[24]=[o("**进程**: 就是为了在 CPU 上实现 多道编程 而提出的，利用 CPU 的多核资源，使程序实现 `并发&并行` ，让每个用户感觉自己在独享 CPU")])),_:1})])]),t[29]||(t[29]=i('<h2 id="_3-进程的基本状态与转换" tabindex="-1"><a class="header-anchor" href="#_3-进程的基本状态与转换"><span>3 进程的基本状态与转换</span></a></h2><h3 id="_3-1-进程的三种基本状态" tabindex="-1"><a class="header-anchor" href="#_3-1-进程的三种基本状态"><span>3.1 进程的三种基本状态</span></a></h3><ul><li><p><strong>就绪态</strong></p><blockquote><p>程序已达到可以运行的状态，只等 CPU 分配资源就可以运行的状态</p></blockquote></li><li><p><strong>阻塞态</strong></p><blockquote><p>程序运行条件没有满足，需要等待条件满足才能执行的状态。如 <code>等待IO操作</code> 时候</p></blockquote></li><li><p><strong>运行态</strong></p></li></ul><blockquote><p>进程已抢占到 CPU，并且正在 CPU 上运行时的状态</p></blockquote><h3 id="_3-2-三种基本状态的转换" tabindex="-1"><a class="header-anchor" href="#_3-2-三种基本状态的转换"><span>3.2 三种基本状态的转换</span></a></h3><p>进程的三种基本状态及其转换，如下:</p><p><code>&lt;img src=&quot;&quot;&gt;</code></p>',7))])}const P=d(f,[["render",y]]),b=JSON.parse('{"path":"/python/%E8%AF%AD%E8%A8%80/%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%BC%96%E7%A8%8B/%E8%BF%9B%E7%A8%8B.html","title":"进程","lang":"zh-CN","frontmatter":{"title":"进程","date":"2021-06-16T00:00:00.000Z","category":["Python","进程"],"tag":["Python","进程"],"description":"操作系统进程相关","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"进程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-06-16T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-30T14:23:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"悦·宝宝\\",\\"url\\":\\"https://github.com/Igarashi-G\\"}]}"],["meta",{"property":"og:url","content":"https://igarashi-g.github.io/python/%E8%AF%AD%E8%A8%80/%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%BC%96%E7%A8%8B/%E8%BF%9B%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"悦 ▪ 宝宝"}],["meta",{"property":"og:title","content":"进程"}],["meta",{"property":"og:description","content":"操作系统进程相关"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-30T14:23:22.000Z"}],["meta",{"property":"article:tag","content":"进程"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:published_time","content":"2021-06-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-30T14:23:22.000Z"}]]},"git":{"createdTime":1665194286000,"updatedTime":1680186202000,"contributors":[{"name":"Igarashi","username":"Igarashi","email":"2545369032@qq.com","commits":4,"url":"https://github.com/Igarashi"}]},"readingTime":{"minutes":2.92,"words":875},"filePathRelative":"python/语言/多任务编程/进程.md","excerpt":"<p>操作系统进程相关</p>\\n","autoDesc":true}');export{P as comp,b as data};
