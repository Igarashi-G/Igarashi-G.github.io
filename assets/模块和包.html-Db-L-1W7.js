import{_ as e}from"./plugin-vueexport-helper-DlAUqK2U.js";import{c as t,d as n,e as h,w as p,r as k,o as r,a as i,b as a}from"./app-BFWhIhUk.js";const d={};function o(g,s){const l=k("Tree");return r(),t("div",null,[s[1]||(s[1]=n(`<p>导入模块、包和构建项目目录</p><h1 id="模块和包" tabindex="-1"><a class="header-anchor" href="#模块和包"><span>模块和包</span></a></h1><h2 id="_1-模块" tabindex="-1"><a class="header-anchor" href="#_1-模块"><span>1. 模块</span></a></h2><div class="hint-container tip"><p class="hint-container-title">用一砣代码实现了某个功能的代码集合</p></div><p>类似于 <strong>函数式编程</strong> 和 <strong>面向过程编程</strong></p><ul><li><strong>函数式编程：</strong> 也叫 <strong>无副作用</strong> 编程，它不会改变外部变量</li><li><strong>面向过程</strong>：函数的堆砌，<strong>不断调用</strong>函数来完成一个功能，提供了代码的 <strong>重用性</strong> 和 <strong>代码间的耦合</strong></li></ul><p>模块分为三种</p><ul><li><p><strong>自定义</strong>模块：自己写的模块</p></li><li><p><strong>内置标准模块</strong>：又称<a href="https://docs.python.org/zh-cn/3/library/index.html" target="_blank" rel="noopener noreferrer">标准库</a></p></li><li><p>开源模块</p></li></ul><h3 id="_1-1-模块的调用" tabindex="-1"><a class="header-anchor" href="#_1-1-模块的调用"><span>1.1 模块的调用</span></a></h3><p>使用 <code>import module</code> 的形式，来引入模块</p><ul><li><p>引入标准库</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>import os, sys</span></span>
<span class="line"><span>import re</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>引入自定义模块</p><p>创建一个 <code>test.py</code> 文件</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 通过如上形式，即可以引入自定义的模块，解释器通过搜索路径找到 test.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>引入第三方模块</p><p>下载第三方库 <code>nmcli</code></p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> nmcli</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>直接引入</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nmcli</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p>使用 <code>from module import ... </code> 的形式，来引入模块中所需的对象</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> environ			</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 引入系统环境 变量</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> add 			</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 引入自定义 test 模块中 add 方法</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> asyncio </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Queue		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 引入异步标准库的 队列类</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>若需要重命名，通常用于同名模块、方法、类等</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fib </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fibonacci</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 将 fibo 模块下的 fib方法 重命名为 fibonacci</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_1-2-脚本执行模块" tabindex="-1"><a class="header-anchor" href="#_1-2-脚本执行模块"><span>1.2 脚本执行模块</span></a></h3><p>假设有 <code>fibo.py</code> 文件</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot;-- fibo.py --&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	a, b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n:</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">        print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39; &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        a, b </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b, a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用如下方式运行 <strong>Python</strong> 模块</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fibo.py</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">argument</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">s&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 如 python fibo.py 50</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会直接视为将代码添加到模块末尾 <code>if __name__ == &#39;__main__&#39;:</code> 下</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> __name__</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;__main__&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sys</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sys.argv[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常用于快捷测试，也是程序执行的入口</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>if __name__ == &#39;__main__&#39;:</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>__name__</code> 的特性是在本模块值为 <code>&#39;__main__&#39;</code>，而在其他模块声明后，则是其他模块名</li><li>通常用来模块内测试代码功能，使功能模块的功能部分，和逻辑执行分离</li></ul><h3 id="_1-3-模块搜索路径" tabindex="-1"><a class="header-anchor" href="#_1-3-模块搜索路径"><span>1.3 模块搜索路径</span></a></h3><p><span style="color:blue;"><strong>标准库</strong>:</span> <strong>Python</strong> 自带的标准模块，内嵌到编译器中，提供操作系统等的基本调用接口，如 <code>sys</code></p><p>对于非内嵌库（<em>自定义</em>），当模块导入后（如: <code>import fibo</code>）</p><ol><li>解释器首先搜索具有 <code>fibo</code> 名称的内置模块，<code>sys.builtin_module_names</code> 中</li><li>若没找到，则会在 <code>sys.path</code> 给出的目录列表中搜索</li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sys.path</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 输出结果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;C:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ProgramData</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Miniconda3</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Scripts</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ipython.exe&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">programdata</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">miniconda3</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">python39.zip&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">programdata</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">miniconda3</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">DLLs&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">programdata</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">miniconda3</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">lib&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">programdata</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">miniconda3&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">programdata</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">miniconda3</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">lib</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">site-packages&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">programdata</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">miniconda3</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">lib</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">site-packages</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">win32&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">programdata</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">miniconda3</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">lib</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">site-packages</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">win32</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">lib&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">programdata</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">miniconda3</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">lib</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">site-packages</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Pythonwin&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;c:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">programdata</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">miniconda3</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">lib</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">site-packages</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">IPython</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">extensions&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;C:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Users</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Igarashi</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">.ipython&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若自定义模块无法找到（<em>所在目录不在系统环境变量</em>），可以修改 <code>path</code> 告诉编译器目录位置</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sys.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(abs_path)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="dir" tabindex="-1"><a class="header-anchor" href="#dir"><span><strong>dir()</strong></span></a></h5><p>用于查找某个模块下定义的所有名称（<em>变量、模块、函数等</em>），无参时列出当前定义的名称</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sys, builtins</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sys)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">## 输出结果</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;__breakpointhook__&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;__displayhook__&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;__doc__&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;__excepthook__&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;__interactivehook__&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;__loader__&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;__name__&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;__package__&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;__spec__&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;__stderr__&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;__stdin__&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;__stdout__&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;"> ...</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;stderr&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;stdin&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;stdout&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;thread_info&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;unraisablehook&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;version&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;version_info&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;warnoptions&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;winver&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">dir</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(builtins)	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看内置函数和变量名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>模块的查找顺序：</strong> 内存中加载 &gt; 内置模块 &gt; <code>sys.path</code> 路径中包含的模块</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p><strong>Pycharm</strong> 中，可能会出现正确执行假象，<strong>IDE</strong> 将路径自动添加到了父包，但其实该路径并不在 <code>sys.path</code> 中</p></div><h5 id="利用-file-相对路径找绝对路径" tabindex="-1"><a class="header-anchor" href="#利用-file-相对路径找绝对路径"><span><strong>利用 <code>__file__</code> 相对路径找绝对路径</strong></span></a></h5><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">abspath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__file__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 把当前文件的相对路径变为绝对路径</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__file__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)				</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 找到当前路径所在的文件夹</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 上 上 级 父路径 加入到环境变量</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">sys.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">abspath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__file__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;..&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 同上，经常出现在配置文件中</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">BASE_DIR</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">abspath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__file__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-python-编译" tabindex="-1"><a class="header-anchor" href="#_1-4-python-编译"><span>1.4 Python &quot;编译&quot;</span></a></h3><p>为了快速加载模块，<strong>Python</strong> 把模块的编译版缓存在文件名为 <mark><code>module.version.pyc</code></mark> 的 <code>__pycache__</code> 目录中， 对编译文件格式进行编码</p><ul><li><p><code>version</code> 一般为 <strong>Python</strong> 的版本号</p><ul><li>如，<strong>CPython</strong> 的 <strong>3.3</strong> 发行版，<code>spam.py</code> 的编译版本缓存为 <code>__pycache__/spam.cpython-33.pyc </code></li><li>使用这种命名惯例，可让不同 <strong>Python</strong> 发行版，及不同版本的已编译模块，<strong>共存</strong></li></ul></li><li><p><strong>Python</strong> 会对比编译版本与源码的 <strong>修改日期</strong>，查看它是否已过期，是否要重新编译，此过程完全自动化</p></li><li><p>编译模块与平台无关，可在不同架构系统之间共享相同的支持库</p></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p><strong>Python</strong> 在两种情况下不检查缓存</p><ol><li>从命令行直接载入模块，只重新编译，不存储编译结果</li><li>没有源模块，就不会检查缓存 <ul><li>为了支持无源文件（仅编译）发行版本， 编译模块必须在源目录下，并且绝不能有源模块</li></ul></li></ol></div><p><a href="https://docs.python.org/3.10/library/compileall.html#module-compileall" target="_blank" rel="noopener noreferrer">编译库 文档</a></p><br><h2 id="_2-包" tabindex="-1"><a class="header-anchor" href="#_2-包"><span>2. 包</span></a></h2><p>解释型语言的 <strong>包</strong> 并不是编译成低级语言（像 <strong>Java</strong> 编译为 <code>.class</code> 字节码文件）而后打包的意思，而是用 <code>.module</code> 构造模块命名空间的方法，是利用包按目录的形式，更加方便模块化和管理模块间的依赖</p><h3 id="_2-1-init-py" tabindex="-1"><a class="header-anchor" href="#_2-1-init-py"><span>2.1 __init__.py</span></a></h3><p>导入包时，<strong>Python</strong> 会搜索 <code>sys.path</code> 里的目录，查找包的子目录，会只将含有 <strong>__init__.py</strong> 文件的目录当成包</p><p>最简情况的 <code>__init__.py</code> 是一个空文件，其也可以执行包的初始化代码，或设置 <code>__all__</code> 变量</p>`,49)),h(l,{title:"/"},{default:p(()=>s[0]||(s[0]=[i("ul",null,[i("li",null,[a(" sound "),i("small",null,"顶级包"),i("ul",null,[i("li",null,[i("code",null,"__init__.py")]),i("li",null,[a(" formats "),i("small",null,"格式化的包"),i("ul",null,[i("li",null,[i("code",null,"__init__.py")]),i("li",null," wavread.py "),i("li",null," ... ")])]),i("li",null,[a(" effects "),i("small",null,"声音效果的包"),i("ul",null,[i("li",null,[i("code",null,"__init__.py")]),i("li",null," echo.py "),i("li",null," surround.py "),i("li",null," reverse.py "),i("li",null," ... ")])]),i("li",null,[a(" filters "),i("small",null,"过滤器包"),i("ul",null,[i("li",null,[i("code",null,"__init__.py")]),i("li",null," ... ")])])])])],-1)])),_:1}),s[2]||(s[2]=n(`<p>此时从包中导入单个模块</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects.echo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>但通常不用全名形式写，而是</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> echo				</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 导入包</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.effects.echo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> echofilter	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 从包中导入函数或变量</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当一个包被 <code>import</code> 时，首先加载它的 <code>__init__.py</code> 文件，故也可在 <code>__init__.py</code> 文件下进行初始化</p><p>如，在 <strong>effects</strong> 文件下的 <code>__init__.py</code> 引入同级目录 <strong>format</strong> 文件下 <code>wavread.py</code> 的所有</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;&quot; __init__.py &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sound.formats.wavread </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时 <code>from.sound.effects import *</code> 同时会包含 <strong>formats</strong> 下的 <code>wavread</code> 模块</p><h3 id="_2-2-all-变量" tabindex="-1"><a class="header-anchor" href="#_2-2-all-变量"><span>2.2 <strong>__all__</strong> 变量</span></a></h3><p>如果包的 <code>__init__.py</code> 代码定义了列表 <code>__all__</code>，运行 <code>from package import *</code> 时，会从 <code>__all__</code> 列表中导入</p><ul><li><p>如作者在 <code>sound/effects/__init__.py</code> 下指定</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">__all__</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;echo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;surround&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>意味执行 <code>from sound.effects import *</code> 时，会导入 <code>echo</code> 和 <code>surround</code> 这两个子模块</p></li></ul><p>简单来说就是 <strong>不想引入文件中的所有模块</strong> 或是 <strong>模块中的所有变量</strong> 而进行 <strong>限制</strong> 导入</p><h3 id="_2-3-path-变量" tabindex="-1"><a class="header-anchor" href="#_2-3-path-变量"><span>2.3 <strong>__path__</strong> 变量</span></a></h3><p>包支持一个更特殊的属性 <a href="https://docs.python.org/zh-cn/3.10/reference/import.html#path__" target="_blank" rel="noopener noreferrer">__path__</a> ，在 <code>__init__.py</code> 文件的代码被执行前，该属性会被初始化为自身所在的目录的列表</p><ul><li><p>默认情况下只有一个元素，就是当前包的路径</p></li><li><p>修改 <code>__path__</code>，就会改到此包内的搜索路径</p></li><li><p>不常用，但可用于扩展包中的模块集</p></li></ul><br><h2 id="_3-调用解释器" tabindex="-1"><a class="header-anchor" href="#_3-调用解释器"><span>3. 调用解释器</span></a></h2><p><strong>Python</strong> 解释器（<em>Linux 环境</em>）通常安装在 <code>/usr/local/bin/python3.10</code> 路径下，将 <code>/usr/local/bin</code> 加入系统变量，即可键入 <code>python3</code> 启动，<strong>Windows</strong> 同理</p><p><a href="https://docs.python.org/zh-cn/3.10/using/cmdline.html#using-on-general" target="_blank" rel="noopener noreferrer">命令行 文档</a></p><h3 id="_3-1-调用模块" tabindex="-1"><a class="header-anchor" href="#_3-1-调用模块"><span>3.1 调用模块</span></a></h3><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> fibo</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这种形式即可调用 <code>module</code> 运行指定的 <code>package</code>（<em>包</em>）</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 若需运行某项目的 main.py 入口命令如下</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> etutorservice</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> etc/default.yml</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>-m</code> 即执行 <code>etutorservice</code> 项目下的 <code>main.py</code> 文件，此外，还可以运行 <strong>zip</strong> 的压缩文件</li><li><code>-c</code> 配置文件的路径，用 <a href="">argparse</a>（<em>参数解析器</em>）来获取执行脚本需要的参数</li><li><code>-r</code> 默认 <code>True</code> ，用于初始化的判断</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p><strong><code>python main.py</code> 和 <code>python -m main.py</code> 区别</strong></p><ol><li>前者是直接运行，后者是把模块当脚本来启动，此时 <code>__name__</code> 为脚本名称，而非 <code>__main__</code></li><li>影响 <code>sys.path</code> 中的环境变量，<code>-m</code> 方式默认缺少当下目录路径，直接启动会将当前路径加入环境变量中</li></ol></div><br><h2 id="_4-目录规范" tabindex="-1"><a class="header-anchor" href="#_4-目录规范"><span>4. 目录规范</span></a></h2><p>假设项目名为 <code>Foo</code>，最方便快捷目录结构如下足够</p><pre><code>Foo/
|-- bin/
|   |-- foo
|
|-- src/
|   |-- tests/
|   |   |-- __init__.py
|   |   |-- test_main.py
|   |
|   |-- __init__.py
|   |-- main.py
|
|-- docs/
|   |-- conf.py
|   |-- abc.rst
|
|-- setup.py
|-- requirements.txt
|-- README
</code></pre><ul><li><p><code>bin/</code> 存放项目的一些 <strong>可执行文件</strong>，起名 <code>script/</code> 之类的也行</p></li><li><p><code>src/</code> 存放项目的所有 <strong>源代码</strong></p><ul><li>源代码中的所有模块、包都应该放在此目录，不要置于顶层目录</li><li>子目录 <code>tests/ </code> 用来存放 <strong>单元测试</strong> 代码</li><li>程序的入口通常命名为 <code>main.py</code></li></ul></li><li><p><code>docs/</code> 存放一些文档</p></li><li><p><code>setup.py</code> 安装、部署、打包的脚本，项目必须，为了 <strong>快速部署 &amp; run</strong> 起来</p><ul><li>过去常用 <strong>setuptools</strong> 打包工具，如 <a href="https://github.com/pallets/flask/blob/main/setup.py" target="_blank" rel="noopener noreferrer">flask</a></li><li>目前主流则是 <a href="/operations/docker/docker%E5%9F%BA%E7%A1%80">Docker</a></li></ul></li><li><p><code>requirements.txt</code> 存放软件依赖的外部 <strong>Python</strong> 包列表，类似前端的 <code>package.json</code></p><ul><li><p>即可通过如下命令将所有的 <strong>Python</strong> 包依赖安装好</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pip</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li><p><code>README.md</code> 项目说明文件，通常使用 <strong>MarkDown</strong> 形式</p><ol><li>软件定位，软件的基本功能</li><li>运行代码的方法: 安装环境、启动命令等</li><li>简要的使用说明</li><li>代码目录结构说明，更详细点可以说明软件的基本原理</li><li>常见问题说明</li></ol><blockquote><p>除外，如 <code>LICENSE.txt</code> 、<code>ChangeLog.txt</code> 等，主要用来项目开源，写开源目录怎么组织，自行查阅</p></blockquote></li></ul><h3 id="_4-1-关于配置文件" tabindex="-1"><a class="header-anchor" href="#_4-1-关于配置文件"><span><strong>4.1 关于配置文件</strong></span></a></h3><h5 id="很多项目对配置文件的使用做法是" tabindex="-1"><a class="header-anchor" href="#很多项目对配置文件的使用做法是"><span><strong>很多项目对配置文件的使用做法是</strong></span></a></h5><ol><li>配置文件写在一个或多个 <strong>Python</strong> 文件中，比如此处的 <code>conf.py</code></li><li>项目中哪个模块用到这个配置文件就直接通过 <code>import conf</code> 形式在代码引入</li></ol><div class="hint-container warning"><p class="hint-container-title">如上做法问题</p><ol><li><p><strong>单元测试变得困难</strong>（<em>因为模块内部依赖了外部配置</em>）</p></li><li><p>配置文件作为用户控制程序的接口，应当 <strong>可由用户自由指定</strong> 该文件的路径</p></li><li><p>程序组件 <strong>可复用性太差</strong>，为这种贯穿所有模块的代码硬编码方式，使得大部分模块都依赖 <code>conf.py</code> 这个文件</p></li></ol></div><h5 id="配置使用更好的方式" tabindex="-1"><a class="header-anchor" href="#配置使用更好的方式"><span><strong>配置使用更好的方式：</strong></span></a></h5><ol><li>模块的配置都可 <strong>灵活配置</strong> ，不受外部配置文件的影响</li><li>程序的配置都 <strong>灵活控制</strong>，如 <strong>Nginx</strong>、<strong>MySQL</strong> 这种软件的配置文件，可用户自由指定</li><li>故不应代码中 <code>import conf</code> 来使用配置文件</li></ol><p>故如上目录结构中，没有将 <code>conf.py</code> 放在源码目录下，而是放在 <code>docs/</code> 目录下，给出的一个配置样例，而不是写死程序中</p><p>可通过给 <code>main.py</code> 设置启动参数指定配置路径的方式来让程序读取配置内容</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> python</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> program</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> doc/settings.py</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -r</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>conf.py</code> 可换个类似名称，如 <code>settings.py</code></li><li>当然，也可用其他格式来编写配置文件，如 <code>settings.yml</code>、<code>default.yml</code></li></ul><br>`,41))])}const A=e(d,[["render",o]]),B=JSON.parse('{"path":"/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85.html","title":"模块和包","lang":"zh-CN","frontmatter":{"title":"模块和包","date":"2020-06-09T00:00:00.000Z","category":["Python"],"tag":["Python","模块"],"star":true,"description":"导入模块、包和构建项目目录","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"模块和包\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-06-09T00:00:00.000Z\\",\\"dateModified\\":\\"2022-09-20T06:19:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"悦·宝宝\\",\\"url\\":\\"https://github.com/Igarashi-G\\"}]}"],["meta",{"property":"og:url","content":"https://igarashi-g.github.io/python/%E8%AF%AD%E8%A8%80/%E8%BF%9B%E9%98%B6/%E6%A8%A1%E5%9D%97%E5%92%8C%E5%8C%85.html"}],["meta",{"property":"og:site_name","content":"悦 ▪ 宝宝"}],["meta",{"property":"og:title","content":"模块和包"}],["meta",{"property":"og:description","content":"导入模块、包和构建项目目录"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-09-20T06:19:59.000Z"}],["meta",{"property":"article:tag","content":"模块"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:published_time","content":"2020-06-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-09-20T06:19:59.000Z"}]]},"git":{"createdTime":1663517244000,"updatedTime":1663654799000,"contributors":[{"name":"Igarashi","username":"Igarashi","email":"2545369032@qq.com","commits":3,"url":"https://github.com/Igarashi"}]},"readingTime":{"minutes":9.16,"words":2748},"filePathRelative":"python/语言/进阶/模块和包.md","excerpt":"<p>导入模块、包和构建项目目录</p>\\n","autoDesc":true}');export{A as comp,B as data};
