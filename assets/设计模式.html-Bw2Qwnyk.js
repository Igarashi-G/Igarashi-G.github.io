import{_ as a}from"./plugin-vueexport-helper-DlAUqK2U.js";import{c as l,a as i,e,d as t,w as p,r as h,o as k,b as d}from"./app-CuyeAIiE.js";const r={};function c(g,s){const n=h("Alert");return k(),l("div",null,[s[1]||(s[1]=i("h1",{id:"python-设计模式",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#python-设计模式"},[i("span",null,"Python 设计模式")])],-1)),s[2]||(s[2]=i("h2",{id:"一、单例模式",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#一、单例模式"},[i("span",null,"一、单例模式")])],-1)),e(n,{type:"info"},{default:p(()=>s[0]||(s[0]=[d("确保整个系统中，某个类，只有**唯一一个**实例存在")])),_:1}),s[3]||(s[3]=t(`<h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><ol><li><p><strong>配置信息</strong>：</p><blockquote><p>服务端配置信息存在一个文件中，通过一个<code>Config</code> 类来读取时，频繁 <code>new Config</code> 类会严重占内存，整个系统中只存了一份 <code>Config</code> 的实例即可反复读取</p></blockquote></li><li><p><strong>数据库连接:</strong></p><blockquote><p>若未使用连接池来复用连接， 全局仅创建一个数据库连接实例，反复复用即可，起码比创建一堆无用连接实例强，但依然建议构建连接池复用</p></blockquote></li><li><p><strong><code>WebSocket</code>等其他线程轮询数据</strong>：</p><blockquote><p>当需要另开辟线程并写个类去轮询取数据时（比如控制固定秒数去数据库更新数据，并只读内存中的一份数据时）每次请求都拿到 <strong>同一个实例</strong> 并在实例内存取数据即可</p></blockquote></li></ol><h3 id="_1-模块的形式" tabindex="-1"><a class="header-anchor" href="#_1-模块的形式"><span>1.模块的形式</span></a></h3><blockquote><p><code>python</code> 的模块在<strong>第一次</strong>导入时，<strong>会生成 <code>.pyc</code> 文件</strong>，当<strong>第二次</strong>导入时，就会<strong>直接加载 <code>.pyc</code> 文件</strong>，不会再次执行模块代码创建实例，因此，把相关的函数和数据定义在模块中，即可获得 <strong>单例对象</strong></p></blockquote><ul><li><p>假设建个文件：<code>mysingleton.py</code></p></li><li><p>创建所需类并实例化对象：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Singleton</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">object</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> foo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">          pass</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  singleton </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Singleton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;singleton&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, singleton, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(singleton))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  ### 输出结果</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # singleton &lt;__main__.Singleton object at 0x0000015E06AEE910&gt; 1503350679824</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用时，在其他文件中导入该对象，即为单例对象（同样的 id）</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> huan.utils.tests.mysingleton </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> singleton</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;import singleton&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, singleton, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(singleton))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">### 输出结果</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># singleton &lt;huan.utils.tests.mysingleton.Singleton object at 0x00000298B09242B0&gt; 2854820659888</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># import singleton &lt;huan.utils.tests.mysingleton.Singleton object at 0x00000298B09242B0&gt; 2854820659888</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-装饰器形式" tabindex="-1"><a class="header-anchor" href="#_2-装饰器形式"><span>2.装饰器形式</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Singleton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">cls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    _instance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> _singleton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(*</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> **</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">kargs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> cls</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _instance:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            _instance[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> cls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(*args, **kargs)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _instance[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">     return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _singleton</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">@Singleton</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> A</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">object</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">a2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a1), </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(a2))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用 python 的类装饰器特性来装饰目标类，从而再类初始化之前走装饰器进行加载</p><ul><li><p>cls:就是类 A，类型即是 type（由于类 A 继承了 object）因此 cls 就相当于 类 A 的引用</p></li><li><p>*args, **kargs：是类初始化传入的参数，因此当实例化 A(1) =&gt; cls(1)</p></li><li><p>A 其实等同于装饰器的返回值 A == _singleton ,当类 A 执行时，意味着加载了_singleton 函数 即 =&gt;<br> A(args, kwargs) == _simgleton(args, kwargs)</p></li></ul><h3 id="_3-使用类方法定义" tabindex="-1"><a class="header-anchor" href="#_3-使用类方法定义"><span>3.使用类方法定义</span></a></h3><pre><code>class Singleton(object):

def __init__(self):
    pass

@classmethod
def get_instance(cls, *args, **kwargs):
    if not hasattr(Singleton, &quot;_instance&quot;): # 注意: 必须只能使用_instance，hasattr 无法获取到 __instance
        Singleton._instance = Singleton(*args, **kwargs)
    return Singleton._instance

or 注（这里的Singleton 就是 cls，如下另一种形式替换，未替换只为了可读性提高）

__instance = None

@classmethod
def get_instance(cls, *args, **kwargs):
    if cls.__instance:
        return cls.__instance
    else:
        cls.__instance = cls(*args, **kwargs)
        return cls.__instance
</code></pre><p>一般情况，大家以为这样就完成了单例模式，但其实这样当使用多线程时会存在问题</p><pre><code>import threading

def task(arg):
    obj = Singleton.get_instance()
    print(obj)

for i in range(10):
    t = threading.Thread(target=task,args=[i,])
    t.start()
</code></pre><p>程序执行后，打印结果如下：</p><pre><code>&lt;__main__.Singleton object at 0x0303BF88&gt;
&lt;__main__.Singleton object at 0x0303BF88&gt;
&lt;__main__.Singleton object at 0x0303BF88&gt;
&lt;__main__.Singleton object at 0x0303BF88&gt;
&lt;__main__.Singleton object at 0x0303BF88&gt;
&lt;__main__.Singleton object at 0x0303BF88&gt;
&lt;__main__.Singleton object at 0x0303BF88&gt;
&lt;__main__.Singleton object at 0x0303BF88&gt;
&lt;__main__.Singleton object at 0x0303BF88&gt;
&lt;__main__.Singleton object at 0x0303BF88&gt;
</code></pre><p>看起来也没有问题，那是因为执行速度过快，如果在 init 方法中有一些 IO 操作，就会发现问题了，下面我们通过 time.sleep 模拟，改写 <strong>init</strong></p><pre><code>def __init__(self):
    import time
    time.sleep(1)
</code></pre><p>重新执行程序后，结果如下</p><pre><code>&lt;__main__.Singleton object at 0x0304C6E8&gt;
&lt;__main__.Singleton object at 0x0304C838&gt;
&lt;__main__.Singleton object at 0x0303BF70&gt;
&lt;__main__.Singleton object at 0x0304C340&gt;
&lt;__main__.Singleton object at 0x0304CAD8&gt;
&lt;__main__.Singleton object at 0x0304C988&gt;
&lt;__main__.Singleton object at 0x0304CC28&gt;&lt;__main__.Singleton object at 0x0304CD78&gt;

&lt;__main__.Singleton object at 0x0304CEC8&gt;
&lt;__main__.Singleton object at 0x03062040&gt;
</code></pre><p>【说明】：</p><ul><li><p>其实这种情况可以想象的到，因为开启多线程时，每个线程独立执行</p></li><li><p>当 线程 1 进来判断时，有 IO 的的情况，该类还尚未来得及实例化，线程 2 几乎和 线程 1 同时来判断，因此 线程 2 也任务该类没有实例化</p></li><li><p>因此在初始化有 IO 阻塞的情况下，多线程时会疯狂创建自己的实例，因为他们都判断该类还尚未实例化</p></li></ul><p>按照以上方式创建的单例，无法支持多线程！！！</p><p>【解决办法】：加锁！未加锁部分并发执行,加锁部分串行执行,速度降低（当创建第一个实例时阻塞）,但是保证了数据安全</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> threading</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> time</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Singleton</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">object</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    __instance_lock </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> threading.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __init__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        time.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    @</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">classmethod</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> get_instance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">cls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> **</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">kwargs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Singleton.__instance_lock:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> hasattr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;_instance&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                cls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">._instance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> cls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(*args, *kwargs)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> cls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">._instance</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">arg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    obj </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Singleton.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get_instance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(obj)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    t </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> threading.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">task, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i, ))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    t.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">time.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">sleep</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">obj </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Singleton.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">get_instance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(obj)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是还是有一点小问题，就是当程序执行时，执行了 time.sleep(20)后，下面实例化对象时，此时已经是单例模式了，但我们还是加了锁，这样<br> 不太好（大概是指非多线程还加锁可能不太合理叭），再进行一些优化，把 intance 方法，改成下面的这样就行：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">@</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">classmethod</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> instance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">cls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> **</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">kwargs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> hasattr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Singleton, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;_instance&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Singleton._instance_lock:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> hasattr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Singleton, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;_instance&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                Singleton._instance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> Singleton</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(*args, **kwargs)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Singleton._instance</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就是每次先判断该类中有无实例化的唯一对象了，若有了则直接返回，没有才考虑加锁并创建单例（即避免了每次加锁，有避免了多线程无锁疯狂创建）</p><p>这样，一个可以支持多线程的单例模式就完成了，但这种方式实现，使用时会有限制，以后实例化必须通过 obj = Singleton.get_instance()<br> 如果用 obj=Singleton() ,这种方式得到的不是单例</p><h3 id="_4-基于-new-方法实现-推荐使用-方便" tabindex="-1"><a class="header-anchor" href="#_4-基于-new-方法实现-推荐使用-方便"><span>4.基于 new 方法实现（推荐使用，方便）</span></a></h3><p>通过上面例子，我们可以知道，当我们实现单例时，为了保证线程安全需要在内部加入锁，然而又要解决初始化避免用 get_instance 的这种写法</p><p>因此可以使用 <strong>new</strong> 方法（python 默认调用 <strong>new</strong> 方法实例化对象，然后再执行类的<strong>init</strong>方法，对这个对象进行初始化）<br> def <strong>init</strong>(self):<br> pass</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> __new__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">cls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> **</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">kwargs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> hasattr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Singleton, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;_instance&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Singleton._instance_lock:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> hasattr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Singleton, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;_instance&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                Singleton._instance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">__new__</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">cls</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Singleton._instance</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span></span></span>
<span class="line"><span>采用这种方式的单例模式，以后实例化对象时，和平时实例化对象的方法一样 obj = Singleton()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- 弊端：这种方式实现每次实例化都会触发 __init__ 方法，因此可以不实现__init__方法，初始化的操作可以放在实例完成以后，再以</span></span>
<span class="line"><span>obj.x=xx的方式去进行初始化操作</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>### 5.基于metaclass方式实现</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- 0.所有类创建的实质，都等同于 Foo = type() -&gt; Foo() = type()()，Foo 其实是 type 的实例化对象，因此可继承上帝类来改写实例化形式</span></span>
<span class="line"><span>- 1.类由 type 创建，创建类时，type 的 __init__ 方法自动执行，类() 执行 type 的 __call__ 方法(类的__new__方法,类的__init__方法)</span></span>
<span class="line"><span>- 2.对象由类创建，创建对象时，类的 __init__ 方法自动执行，对象()执行类的 __call__ 方法</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>    class SingletonType(type):</span></span>
<span class="line"><span>        __instance = None</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        def __init__(cls, *args, **kwargs):</span></span>
<span class="line"><span>            super(SingletonType, cls).__init__(*args, **kwargs)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        def __call__(cls, *args, **kwargs):  # 这里的 cls，即Foo类</span></span>
<span class="line"><span>            print(&quot;cls&quot;, cls)</span></span>
<span class="line"><span>            single_obj = cls.__new__(cls, *args, **kwargs)</span></span>
<span class="line"><span>            cls.__init__(single_obj, *args, **kwargs)  # Foo.__init__(obj)</span></span>
<span class="line"><span>            return single_obj</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>    class Foo(metaclass=SingletonType):  # 指定创建 Foo 的 type 为 SingletonType</span></span>
<span class="line"><span>        def __init__(self, name):</span></span>
<span class="line"><span>            self.name = name</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        def __new__(cls, *args, **kwargs):</span></span>
<span class="line"><span>            return object.__new__(cls)</span></span>
<span class="line"><span>以上为利用继承 type类 以及利用 metaclass 创建改写的通用形式。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>那么实现metaclass单例模式，即可如下：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    import threading</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    class SingletonType(type):</span></span>
<span class="line"><span>        _instance_lock = threading.Lock()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        def __call__(cls, *args, **kwargs):</span></span>
<span class="line"><span>            if not hasattr(cls, &quot;_instance&quot;):</span></span>
<span class="line"><span>                with SingletonType._instance_lock:</span></span>
<span class="line"><span>                    if not hasattr(cls, &quot;_instance&quot;):</span></span>
<span class="line"><span>                        cls._instance = super(SingletonType,cls).__call__(*args, **kwargs)</span></span>
<span class="line"><span>            return cls._instance</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    class Foo(metaclass=SingletonType):</span></span>
<span class="line"><span>        def __init__(self,name):</span></span>
<span class="line"><span>            self.name = name</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>​    obj1 = Foo(&#39;name1&#39;)</span></span>
<span class="line"><span>​    obj2 = Foo(&#39;name2&#39;)</span></span>
<span class="line"><span>​    print(obj1, obj2)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>## 二、工厂模式</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>​</span></span>
<span class="line"><span>​</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33))])}const A=a(r,[["render",c]]),y=JSON.parse('{"path":"/python/%E8%AF%AD%E8%A8%80/%E6%B7%B1%E5%85%A5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"设计模式","lang":"zh-CN","frontmatter":{"title":"设计模式","order":20,"description":"Python 设计模式 一、单例模式 使用场景 配置信息： 服务端配置信息存在一个文件中，通过一个Config 类来读取时，频繁 new Config 类会严重占内存，整个系统中只存了一份 Config 的实例即可反复读取 数据库连接: 若未使用连接池来复用连接， 全局仅创建一个数据库连接实例，反复复用即可，起码比创建一堆无用连接实例强，但依然建议构建...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-10-09T12:42:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"悦·宝宝\\",\\"url\\":\\"https://github.com/Igarashi-G\\"}]}"],["meta",{"property":"og:url","content":"https://igarashi-g.github.io/python/%E8%AF%AD%E8%A8%80/%E6%B7%B1%E5%85%A5/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"悦 ▪ 宝宝"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"Python 设计模式 一、单例模式 使用场景 配置信息： 服务端配置信息存在一个文件中，通过一个Config 类来读取时，频繁 new Config 类会严重占内存，整个系统中只存了一份 Config 的实例即可反复读取 数据库连接: 若未使用连接池来复用连接， 全局仅创建一个数据库连接实例，反复复用即可，起码比创建一堆无用连接实例强，但依然建议构建..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-10-09T12:42:17.000Z"}],["meta",{"property":"article:modified_time","content":"2022-10-09T12:42:17.000Z"}]]},"git":{"createdTime":1665194286000,"updatedTime":1665319337000,"contributors":[{"name":"Igarashi","username":"Igarashi","email":"2545369032@qq.com","commits":2,"url":"https://github.com/Igarashi"}]},"readingTime":{"minutes":6.39,"words":1918},"filePathRelative":"python/语言/深入/设计模式.md","excerpt":"\\n<h2>一、单例模式</h2>\\n<h3>使用场景</h3>\\n<ol>\\n<li>\\n<p><strong>配置信息</strong>：</p>\\n<blockquote>\\n<p>服务端配置信息存在一个文件中，通过一个<code>Config</code> 类来读取时，频繁 <code>new Config</code> 类会严重占内存，整个系统中只存了一份 <code>Config</code> 的实例即可反复读取</p>\\n</blockquote>\\n</li>\\n<li>\\n<p><strong>数据库连接:</strong></p>\\n<blockquote>\\n<p>若未使用连接池来复用连接， 全局仅创建一个数据库连接实例，反复复用即可，起码比创建一堆无用连接实例强，但依然建议构建连接池复用</p>\\n</blockquote>\\n</li>\\n<li>\\n<p><strong><code>WebSocket</code>等其他线程轮询数据</strong>：</p>\\n<blockquote>\\n<p>当需要另开辟线程并写个类去轮询取数据时（比如控制固定秒数去数据库更新数据，并只读内存中的一份数据时）每次请求都拿到 <strong>同一个实例</strong> 并在实例内存取数据即可</p>\\n</blockquote>\\n</li>\\n</ol>","autoDesc":true}');export{A as comp,y as data};
