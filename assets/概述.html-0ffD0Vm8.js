import{_ as i}from"./plugin-vueexport-helper-DlAUqK2U.js";import{c as n,d as a,o as l}from"./app-BSKYQGO5.js";const t="/assets/01-01-17442726341171-B55FCutZ.svg",e="/assets/01-02-17442726341173-D0LYEfZG.svg",h="/assets/01-03-17442726341174-BvucrVce.svg",p="/assets/01-04-17442726341175-CUvTbW7T.svg",k="/assets/01-05-17442726341172-CPhsm1Vw.svg",d="/assets/%E5%8D%95%E9%93%BE%E8%A1%A8-B16Riu2l.svg",r="/assets/01-07-17442727614567-CsIVhkVT.png",A="/assets/01-08-17442727614556-CYx-r-xW.svg",g="/assets/01-09-17442727614568-Z1kF4O16.png",c={};function o(B,s){return l(),n("div",null,s[0]||(s[0]=[a('<p><strong>Golang</strong> 数据结构、算法概述</p><h2 id="_1-数据结构概述" tabindex="-1"><a class="header-anchor" href="#_1-数据结构概述"><span>1.数据结构概述</span></a></h2><h3 id="_1-1-数据的容器" tabindex="-1"><a class="header-anchor" href="#_1-1-数据的容器"><span>1.1 数据的容器</span></a></h3><p>在实际开发中，同一类型的数据，往往需要使用容器来进行存储，常见的容器有数组、集合等等。不同的容器在使用上往往带来不同的效果，比如有的容器可以支持快速查找出某个单独数据，如数组、哈希表，有的容器能够支持快速存储，如链表。根据不同需求而使用的不同的数据存储容器都可以称之为<code>数据结构</code>。</p><blockquote><p><strong>数据</strong>：包括开发中的整数、浮点数等数值类数据，也包括日常中的文字、图形等数据。</p><p><strong>数据元素</strong>：数据的基本单位，比如一个字符串数据，其数据元素就是每个字符，比如一个学生表，每个学生就是数据元素。数据元素也可以称为元素、记录、结点、顶点。</p><p><strong>数据项</strong>：数据项是数据元素不可分割的最小单位，也称为属性、字段、域，包括类似性别、籍贯这样不可拆分的初等项，也包括成绩这样的组合项，例如可以拆分为物理成绩、化学成绩。</p><p><strong>数据结构</strong> （data structure）：相互之间存在一种或多种特定关系的数据元素的集合。数据结构也分为动态、静态两种，比如数组这样的元素个数与元素之间的关系不变的是静态数据结构（static data structure），链表这样的元素个数和元素关系因为增删会发生改变的称为动态数据结构（dynamic data structure）。</p><p><strong>数据对象</strong>：相同数据元素的集合，即一个封装体，既包含属性，也要包含动作。</p></blockquote><h3 id="_1-2-数据的存储" tabindex="-1"><a class="header-anchor" href="#_1-2-数据的存储"><span>1.2 数据的存储</span></a></h3><h4 id="_1-2-1-存储方式" tabindex="-1"><a class="header-anchor" href="#_1-2-1-存储方式"><span>1.2.1 存储方式</span></a></h4><p>数据在存储时候，可以通过 <code>数据元素之间的关系</code> 表示，比如存储为线性的结构、树形结构，这是一种逻辑上的关系，称为 <code>逻辑结构</code> 。</p><p>当然这些数据 <strong>最终都要在磁盘上进行落地</strong> ，这即是 <code>物理结构</code> 。</p><h4 id="_1-2-2-逻辑结构" tabindex="-1"><a class="header-anchor" href="#_1-2-2-逻辑结构"><span>1.2.2 逻辑结构</span></a></h4><blockquote><p><strong>逻辑结构：</strong> 数据结构实例中的数据元素之间存在的相互关系</p></blockquote><p>一般可以将逻辑结构划分为线性结构、非线性结构两大类，非线性结构一般包括树形、图形结构等，如下所示四种常见逻辑结构：</p><ol><li><p><strong>线性结构：</strong> 结构中的数据元素之间存在着一对一的关系，如线性表、向量、栈、队列、优先队列、字典</p></li><li><p><strong>集合结构：</strong> 结构中的数据元素之间除了同属于一个集合外，无其他关系(与数学中的集合概念一致)，如并查集</p></li><li><p><strong>树形结构：</strong> 结构中的数据元素之间存在着一对多的关系，如二叉树</p></li><li><p><strong>图形结构：</strong> 结构中的数据元素之间存在着多对多的关系，也称为网状结构，如有向图</p></li></ol><p><strong>线性结构</strong>：<strong>元素之间是一对一关系</strong>，包括链表、队列、栈等常见数据结构，如下图所示：</p><p><img src="'+t+'" alt="线性结构"></p><p>线性结构具备下列特点：</p><ul><li>必定存在唯一的一个<code>第一个元素</code></li><li>必定存在唯一的一个<code>最后一个元素</code></li><li>除第一个元素之外，其他数据元素均有唯一的前驱</li></ul><p><strong>集合结构</strong>：<strong>元素之间完全平等，只有一个关系，即属于同一集合</strong>，如下图：</p><p><img src="'+e+'" alt="集合结构"></p><p><strong>树形结构</strong>：<strong>元素之间是一对多关系</strong>，常见的数据结构有二叉树、堆、并差集等，如下图所示：</p><p><img src="'+h+'" alt="树形结构"></p><p><strong>图形结构</strong>：<strong>元素之间是多对多关系</strong>，常见的数据结构是邻接矩阵、邻接表等，如下图所示：</p><p><img src="'+p+`" alt="图形结构"></p><p>当然我们也可以直观的将数据结构划分为：<strong>线性结构</strong>（一对一关系，如链表），<strong>非线性关系</strong>（非一对一关系，如图、树）。</p><p>这些逻辑结构可以通过一个二元组来表示：</p><blockquote><p><strong>Data_Structure = (D, S)</strong> 其中 D 是数据元素的有限集合，S 是在 D 中数据元素之间的关系集合。</p></blockquote><p>线性结构的二元组示例：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>D = {01, 02, 03, 04, 05}，</span></span>
<span class="line"><span>S = {&lt;02,04&gt;, &lt;03,05&gt;, &lt;05,02&gt;, &lt;01,03&gt;}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">贴士：</p><p>多元组用来描述确定成分的数学对象，即对象个数优先的序列。</p></div><h3 id="_1-3-存储结构" tabindex="-1"><a class="header-anchor" href="#_1-3-存储结构"><span>1.3 存储结构</span></a></h3><p>物理结构既要存储真实的数据，也要存储数据的逻辑关系，如果逻辑结构不能在物理中实现，数据结构也就失去了意义！</p><blockquote><p><strong>物理结构（存储结构）</strong> ：物理结构是数据的逻辑结构在计算机中的真实存储形式，即数据结构在计算机中的表示（映像），也称为<strong>存储结构</strong>。</p></blockquote><p>物理结构（元素的关系）在计算机中有两种不同的表示方法：</p><ol><li><p><strong>顺序映像：</strong> 其存储结构称为<code>顺序存储结构</code>，特点是借助元素在存储器中的相对位置来表示数据元素之间的逻辑关系</p></li><li><p><strong>非顺序映像：</strong> 其存储结构称为<code>链式存储结构</code>，特点是利用元素存储地址的指针表示数据元素之间的逻辑关系</p></li></ol><p><strong>顺序结构</strong>：把数据元素存放在连续的存储单元里，其数据间的逻辑关系和物理关系是一致的，最经典的顺序结构是数组，数组中的元素都是依次摆放的，如下所示：</p><p><img src="`+k+'" alt="顺序结构"></p><p>从上图看出，顺序结构可以利用索引快速查找某个位置的数据，但是无法解决插入等问题，在插入一个数据时，为了保证数据的逻辑关系，则插入位置的后续元素都要进行后移一位！！</p><p><strong>链式结构</strong>：</p><p><img src="'+d+`" alt="链式结构"></p><p>从上述看出，链式存储结构可以合理解决插入问题，只需要破坏插入位置的前后元素的关系即可，但是顺序结构失去了索引功能。</p><p>此外还有其他存储结构如：<strong>索引存储</strong>在存储元素时还要建立索引表，<strong>散列存储</strong>可以根据一个关键码直接得到存储地址。</p><div class="hint-container info"><p class="hint-container-title">总结</p><ul><li><strong>顺序结构中：</strong> 数据元素的 存储地址 就能直接的反应数据元素之间的逻辑关系了！</li><li><strong>而在链式存储结构中：</strong> 需要利用结点之间的指针来间接反应数据元素之间的逻辑结构！</li></ul></div><h3 id="_2-3-物理结构和逻辑结构关系" tabindex="-1"><a class="header-anchor" href="#_2-3-物理结构和逻辑结构关系"><span>2.3 物理结构和逻辑结构关系</span></a></h3><p><strong>逻辑结构是面向问题的:</strong> 实际业务中，我们需要什么样的数据结构，要根据业务出发选择合适的结构。</p><p><strong>物理结构是面向计算机的：</strong> 选型了逻辑结构后，还需要将这些数据按照逻辑结构规范存储进计算机中。</p><div class="hint-container note"><p class="hint-container-title">所以</p><p>数据的逻辑结构是独立于数据的存储结构的，而数据的存储结构则要依赖于数据的逻辑结构来实现。</p><p>任何一个算法的设计取决于逻辑结构，其实现依赖于存储结构。</p></div><h3 id="_3-数据的抽象数据类型" tabindex="-1"><a class="header-anchor" href="#_3-数据的抽象数据类型"><span>3. 数据的抽象数据类型</span></a></h3><h4 id="_3-1-数据在计算机中的存储方式" tabindex="-1"><a class="header-anchor" href="#_3-1-数据在计算机中的存储方式"><span>3.1 数据在计算机中的存储方式</span></a></h4><p>在物理上，数据是以二进制位的形式存储在物理设备上的，这个<code>位（bit）</code>即二进制数 0、1 中的一位，是计算机的最小存储单元。</p><p>数据结构的数据元素是由若干位组合形成的位串表示，位串称为<strong>元素</strong>（element）或<strong>结点</strong>（node）。</p><p>当数据元素由若干数据项组成时，位串中对应于各个数据项的子位串称为<strong>数据域</strong>（data field）。所以结点也可以看作是数据元素在计算机中的映像。</p><h4 id="_3-2-抽象数据类型的表示" tabindex="-1"><a class="header-anchor" href="#_3-2-抽象数据类型的表示"><span>3.2 抽象数据类型的表示</span></a></h4><p>现在数据结构有了逻辑表现、存储表现，在代码层面需要依靠抽象数据类型 <strong>ADT</strong>（Abstract Data Type)来体现。</p><div class="hint-container tip"><p class="hint-container-title">贴士：</p><p>编程语言中内置的数据类型如：<code>int、string、array</code> 其实就是数据结构的存储映像实现，但是仅仅这些结构往往不足以使用，还需要自定义一些结构。</p></div><p>ADT 定义格式如下：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ADT 抽象数据类型名 {</span></span>
<span class="line"><span>    数据对象：&lt;数据对象的定义&gt;</span></span>
<span class="line"><span>    数据关系：&lt;数据关系的定义&gt;</span></span>
<span class="line"><span>    基本操作：&lt;基本操作的定义&gt;</span></span>
<span class="line"><span>}ADT 抽象数据类型名</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本操作往往是：创建、销毁、查找、插入、删除、排序。</p><p><strong>抽象数据类型</strong>就是数据结构的数学数据模型以及定义在该模型上的一系列操作。与数据结构呼应，抽象数据类型可以由三元组表示：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 其中D 是数据对象，S 是 D 上的关系集，P 是对 D 的操作集</span></span>
<span class="line"><span>(D, S, P)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>严蔚敏《数据结构》中对线性表的抽象数据类型定义示例：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ADT List {</span></span>
<span class="line"><span>    数据对象：D = {a1 | a1 ∈ ElemSet, i = 1, 2, ...,n, n &gt;= 0}</span></span>
<span class="line"><span>    数据关系：R1 = { &lt;ai-1, ai &gt; | ai-1, ai∈D， i=2,...n}           # 类似ai-1中i-1都是下标</span></span>
<span class="line"><span>    基本操作：</span></span>
<span class="line"><span>        InitList(&amp;L)</span></span>
<span class="line"><span>            操作结果：构造一个空线性表L</span></span>
<span class="line"><span>        DestroyLit(&amp;L)</span></span>
<span class="line"><span>            初始条件：线性表L已经存在</span></span>
<span class="line"><span>            操作结果：销毁线性表L</span></span>
<span class="line"><span>        ClearList(&amp;L)</span></span>
<span class="line"><span>            初始条件：线性表L已经存在</span></span>
<span class="line"><span>            操作结果：重置L为空表</span></span>
<span class="line"><span>        ListEmpty(L)</span></span>
<span class="line"><span>            初始条件：线性表L已经存在</span></span>
<span class="line"><span>            操作结果：若L为空表，返回TRUE，否则返回FALSE</span></span>
<span class="line"><span>        ListLength(L)</span></span>
<span class="line"><span>            初始条件：线性表L已经存在</span></span>
<span class="line"><span>            操作结果：返回L中数据元素的个数</span></span>
<span class="line"><span>        GetElem(L, e, compare())</span></span>
<span class="line"><span>            初始条件：线性表L已经存在，1&lt;=i&lt;=ListLenth(L)</span></span>
<span class="line"><span>            操作结果：用e返回L中第i个数据元素的值</span></span>
<span class="line"><span>        LocateElem(L, e, compare())</span></span>
<span class="line"><span>            初始条件：线性表L已经存在，compare()是 数据元素判定函数</span></span>
<span class="line"><span>            操作结果：返回L中第1个与e满足关系compare()的数据元素位序，若这样的数据元素不存在，则返回0</span></span>
<span class="line"><span>        ProrElem(L, cur_e, &amp;pre_e)</span></span>
<span class="line"><span>            初始条件：线性表L已存在</span></span>
<span class="line"><span>            操作结果：若cur_e是L的数据元素，且不是最后一个，则用pre_e返回它的前驱，否则操作失败，pre_e无定义</span></span>
<span class="line"><span>        NextElem(L, cur_e, &amp;next)e)</span></span>
<span class="line"><span>            初始条件：线性表L已经存在</span></span>
<span class="line"><span>            操作结果：若cure_e是L的数据元素，且不是最后一个，则用next_e返回它的后继，否则操作失败，next_e无定义</span></span>
<span class="line"><span>        ListInsert(&amp;L, i, e)</span></span>
<span class="line"><span>            初始条件：线性表L已经存在，1&lt;=i&lt;=ListLength(L)+1</span></span>
<span class="line"><span>            操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1</span></span>
<span class="line"><span>        ListDelete(&amp;L, i, &amp;e)</span></span>
<span class="line"><span>            初始条件：线性表L已经存在且非空，1&lt;=i&lt;=ListLength(L)</span></span>
<span class="line"><span>            操作结果：删除L的第i个数据元素，并用e返回其值，L的长度减1</span></span>
<span class="line"><span>        ListTraverse(L, visit())</span></span>
<span class="line"><span>            初始条件：线性表L已经存在</span></span>
<span class="line"><span>            操作结果：依次对L的每个数据元素调用函数visit()，一旦visit()失败，则操作失败</span></span>
<span class="line"><span>}ADT List</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-算法概述" tabindex="-1"><a class="header-anchor" href="#_2-算法概述"><span>2. 算法概述</span></a></h2><h3 id="_2-1-什么是算法" tabindex="-1"><a class="header-anchor" href="#_2-1-什么是算法"><span>2.1 什么是算法</span></a></h3><blockquote><p>算法（algorithm）是对特定问题求解步骤的一种描述。</p></blockquote><p>比如现在要计算 1 到 n 之间的整数的和，这个求和函数其实就是一个算法了，当然不同的算法，其效率在不同场景中往往有好坏之分：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第一种算法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第二种算法：数学家高斯孩提时的做法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sumByGauss</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然我们不能仅仅从代码的数量上就判定高斯的做法更加优秀，而是要通过运算步骤数量来判定，假如现在要运算 1 到 100 之间的整数和，第一种算法 for 循环中的加法运算执行了 100 次，而高斯的算法无论 n 取值为多少，只是进行了乘法、加法、除法这三步运算即得到了结果，n 越大，高斯的算法越发优秀！</p><h3 id="_2-2-算法的特性" tabindex="-1"><a class="header-anchor" href="#_2-2-算法的特性"><span>2.2 算法的特性</span></a></h3><p><strong>在计算机中是指令的有限序列</strong>，每条指令表示一个或者多个操作。算法具备以下 5 个基本特性：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>输入：可以理解为参数，所以算法可以没有输入，也可以有多个输入</span></span>
<span class="line"><span>输出：算法必须有输出，没有输出，算法也就失去了意义</span></span>
<span class="line"><span>有穷性：算法运算的步骤（指令）必须是有限次的，算法无法停止运行同样失去了意义</span></span>
<span class="line"><span>确定性：算法的每个步骤都必须有明确的意义，在一定条件下，相同的输入只能有唯一结果</span></span>
<span class="line"><span>可行性：算法的每个步骤都必须是可行有效的，即每一步都能通过执行有限次数完成</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-算法的设计要求" tabindex="-1"><a class="header-anchor" href="#_2-3-算法的设计要求"><span>2.3 算法的设计要求</span></a></h3><p>一个算法如果要设计好，必须达到以下目标：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>正确性（correctness）：不含语法错误，对各种合法的输入数据都能满足</span></span>
<span class="line"><span>可读性（readability）：算法程序应该简洁易懂</span></span>
<span class="line"><span>健壮性（robustness）：非法数据被输入时，不会引起算法崩溃、出错，也即鲁棒性</span></span>
<span class="line"><span>效率与低存储量需求：算法的执行时间要尽量短，占据内存要尽量小</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-算法的执行次数" tabindex="-1"><a class="header-anchor" href="#_2-4-算法的执行次数"><span>2.4 算法的执行次数</span></a></h3><p>程序的执行时间是无法准确预估的，可以通过预估代码基本操作的执行次数来判断算法的效率，即<strong>频度统计法</strong>。</p><p>规模为 $n$ 的问题，所需要的时间可以记为 $T(n)$，在代码中，语句的总执行次数为：</p><p>$T(n)= O(f(n))$</p><p>如下示例中，算法的执行规模是 n，执行次数是：$T(n) = 3n + 1$。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;开始本轮输出</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 这里执行 1 * n 次</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, i);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         // 这里执行 1 * n 次</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;本轮输出结束</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 这里执行 1 * n 次</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;跳出循环，本轮程序运行结束</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 这里执行 1 次</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述描述中，通过代码的基本执行次数粗略了估算了算法的效率，但是算法的效率还需要带入规模的差异。现在实现一个结果有两个算法：算法 A 与算法 B，他们的输入规模都是 n，算法 A 要做 2n+3 次操作，算法 B 要做 3n+1 次操作，两个算法谁更快？</p><p>一开始 A 算法计算次数很多，但是随着 n 的增长(大于 2)，A 算法计算次数比算法 B 越来越少，所以算法 A 整体上比算法 B 好。</p><p>输入规模 n 在没有限制的情况下，只要超过一个数值 N ，这个函数就总大于另一个函数，则称函数是<strong>渐进增长</strong>：</p><blockquote><p>函数的渐进增长：给定两个函数 $f(n)$ 和 $g(n)$，如果存在一个整数 $N$，使得所有的 $n &gt; N$ ,$f(n)$ 总是比 $g(n)$ 大，那么 $f(n)$ 的增长渐进快于 $g(n)$。</p></blockquote><p>在评价算法的效率时，往往忽略其处理小规模问题的差异，而是关注在更大规模问题时的表现，即更注重随着规模的增大，其效率的总体变化趋势。</p><p>比如下面是 3 个算法的执行次数：</p><ul><li>算法 A：$9n^2 + 3n + 1000000000$</li><li>算法 B：$9n^2 + 7n + 10$</li><li>算法 C：$3n^2 + 3n + 1000000000$</li><li>算法 D：$n^3 + n^2 + 7$</li></ul><p>在数学的极限理论中，当 n 趋于无穷大时，即算法的循环次数无限放大时，A 和 B 的值会无限趋近，而 A 与 C 的比值的极限则为 3，相应的，A 与的 D 相比，A 值的放大速度远不及 D，可以采用数学极限中的 <code>抓大头</code> 方法进行比较！</p><h3 id="_2-5-算法的时间复杂度" tabindex="-1"><a class="header-anchor" href="#_2-5-算法的时间复杂度"><span>2.5 算法的时间复杂度</span></a></h3><blockquote><p><strong>时间复杂度</strong>：随着问题规模 n 的增长，算法执行时间的增长率和 f(n)的增长率相同，称为算法的渐进时间复杂度，简称时间复杂度。</p></blockquote><p>这样用 $O()$ 来体现算法时间复杂度的记法，也称为<strong>大 $O$ 表示法（big-O notation）</strong>。一般情况下，$T(n)$ 增长最慢的算法为最优算法。程序中语句的重复执行的次数称为<strong>频度</strong>（frequency count），频度直接影响了算法的时间复杂度。</p><p><strong>最坏情况与平均情况</strong>：<br> 比如查询 n 个随机数数组中最小数，最好第一个元素就是，那么时间复杂度为 $O(1)$，如果很不幸数组的最后一个元素才是，那么时间复杂度是 $O(n)$。</p><p>所以算法的时间复杂度具体会受到 2 个因素影响：</p><ul><li>问题的规模：规模 $(n)$ 越大，算法的基本操作执行的次数越多</li><li>待处理数据的初态：如两个数相称，如果有一个因子为 0，那么算法的时间复杂度立刻就变为了 $O(1)$</li></ul><p>对算法的分析有两种方法：</p><ul><li>计算所有情况的平均值，称为平均时间复杂度(上述案例的 n/2)</li><li>计算最坏情况下的复杂度，<strong>一般都会使用最坏复杂度</strong></li></ul><h3 id="_2-6-算法的空间复杂度" tabindex="-1"><a class="header-anchor" href="#_2-6-算法的空间复杂度"><span>2.6 算法的空间复杂度</span></a></h3><p>通过空间能够换取时间上的便利，比如判断某个年份是否是闰年，我们可以书写一个算法，这个算法每次给出年份都要进行计算，但是我们也可以将所有的年份书写为一个键值对，是闰年的值为 1，不是的值为 0，这样判断是否是闰年直接查看键值对结果即可，但是相应的，我们需要这个键值对的额外存储空间。</p><p>算法的空间复杂度（space complexity）公式：</p><p>$S(n) = O(f(n))$</p><p>$n$ 为问题规模，$f(n)$ 为 $n$ 所占存储空间的函数，同样使用大$O$表示法表示空间复杂度。</p><div class="hint-container info"><p class="hint-container-title">总结</p><p><strong>通常我们说算法的复杂度是指时间复杂度</strong>，因为在当前时代，对速度的追求往往大于对空间的追求。</p><p>如果算法执行时所需的辅助空间相遇于输入的数据量来说是个常数，那么称此算法为<strong>原地工作</strong>。</p><p>数据结构课程其实研究的就是：逻辑结构、存储结构、算法三个方面。</p></div><h2 id="_3-大-o-表示法" tabindex="-1"><a class="header-anchor" href="#_3-大-o-表示法"><span>3. 大 O 表示法</span></a></h2><h3 id="_3-1-大o中的几个记号" tabindex="-1"><a class="header-anchor" href="#_3-1-大o中的几个记号"><span>3.1 大O中的几个记号</span></a></h3><p><strong>将算法中基本操作的执行次数作为算法时间复杂度的度量</strong>，所以大 $O$ （big-O notation）并不表示具体的运行时间，而是用来比较操作次数，以指出算法运行时间的增速。</p><p>大$O$中有两个记号：</p><ul><li>大 Ω 记号：算法的最好情况，所以 T(n)一般介于 Ω(g(n)) 与 O(f(n)) 之间。</li><li>大 Θ 记号：算法恰好出现了 g(n) = f(n) 的情况</li></ul><p>大 $O$ 表示法一般采用最差情况下的运行时间。</p><p>如果存在正的常数 c 和函数 g(n)，对任意 n&gt;&gt;2，有 T(n) &gt; c * g(n)，即认为：在 n 足够 大后，g(n)给出了 T(n)的一个下界，记为：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>T(n) = Ω(g(n))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果存在正的常数 c1 和 c2，以及函数 h(n)，对任意 n&gt;&gt;2，有 c1<em>h(n) &lt; T(n) &lt; c2</em> h(n)，即认为：在 n 足够大后，h(n)给出了 T(n)的一个确界，记为：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>T(n) = Θ(g(n))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>三者关系如图：<br><img src="`+r+`" alt="大O记号"></p><h3 id="_3-2-推导大-o-阶方法" tabindex="-1"><a class="header-anchor" href="#_3-2-推导大-o-阶方法"><span>3.2 推导大 $O$ 阶方法</span></a></h3><p>常用的推导大 O 阶的步骤：</p><ol><li><p>用 常数 1 取代运行时间中的所有加法常数</p></li><li><p>在修改后的运行次数函数中，只保留最高阶项</p></li><li><p>如果最高阶项目存在且不是 1，则去除与这个项相乘的常数</p></li><li><p>得到结果就是大 O 阶</p></li></ol><p>示例：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 对于规模为n的算法，其执行次数为：</span></span>
<span class="line"><span>T(n) = 3n + 1</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 其时间复杂度为</span></span>
<span class="line"><span>T(n) = O(n)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>规律总结</strong>：</p><ul><li>加法规则：多项相加，只保留最高阶的项，且系数变为 1</li><li>乘法规则：多项相乘，都保留</li></ul><p>示例：</p><ul><li>$n^3 + 999n$：$O(n^3)$</li><li>$n^3 + n<sup>2log_2n$：$O(n</sup>3) + O(log_2n)$</li></ul><h3 id="_3-3-递归算法的推导" tabindex="-1"><a class="header-anchor" href="#_3-3-递归算法的推导"><span>3.3 递归算法的推导</span></a></h3><p>对于递归算法，假设退出递归时执行的次数为 A，那么递归算法整体的执行次数是一个分段函数：</p><p>当 n 满足了边界条件时：$T(n)=A$</p><p>当 n 不满足边界条件时：$T(n)=A+T(n-1)$</p><p>示例：下列递归算法用于计算数组前 n 个元素的值</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> rsum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[], </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> rsum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(arr, n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 n &lt;= 0 比较，return 0 返回，是 2 次操作，所以 A=2，其程序执行次数为：</p><p>$$<br> T(n)=<br> \\begin{cases}<br> 2,n\\leq0\\<br> 2+T(n-1),n&gt;0\\<br> \\end{cases}<br> $$</p><p>现在推导其执行次数，得到其复杂度为$O(n)$：</p><div class="language-txt line-numbers-mode" data-highlighter="shiki" data-ext="txt" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>T(n) = 2 + T(n-1)</span></span>
<span class="line"><span>     = 2 + 2 + T(n-2)      = 2*2 + T(n-2)</span></span>
<span class="line"><span>     = 2 + 2 + 2 + T(n-3)  = 2*3 + T(n-3)</span></span>
<span class="line"><span>     ...</span></span>
<span class="line"><span>     = 2n + T(0)</span></span>
<span class="line"><span>     = 2n + 2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-常数阶-o-1-和线性阶-o-n" tabindex="-1"><a class="header-anchor" href="#_3-4-常数阶-o-1-和线性阶-o-n"><span>3.4 常数阶 $O(1)$ 和线性阶 $O(n)$</span></a></h3><p>常数阶：算法的效率与输入的规模无关，即不会随着 n 的变化而变化，而线性阶的算法其复杂度随着 n 的增大进行线性增长。如之前提到的计算 1 到 n 之间的正整数和的两种方式：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第一种算法，时间复杂度为 O(n)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 第二种算法，时间复杂度为 O(1)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sumByGauss</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 执行了1次和，1次乘，1次除，这些常数都可以忽略不计</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结 1：顺序执行的代码只影响常数项，可以忽略</strong></p><h3 id="_3-5-平方阶-o-n-2" tabindex="-1"><a class="header-anchor" href="#_3-5-平方阶-o-n-2"><span>3.5 平方阶 $O(n^2)$</span></a></h3><p>循环的时间复杂度为 O(n)，那么循环嵌套的复杂度如下所示为：O(m * n)：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> m </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> m; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n; j</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 时间复杂度为O(1)的程序序列</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>循环的时间复杂度等于循环体的复杂度乘以该循环运行的次数。</p></blockquote><p>再看一个例子：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i; j </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n; j</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // 时间复杂度为O(1)的程序序列</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述算法总执行次数为： <code>n + (n-1) + (n-2) + ... + 1</code>，即 <code>n*(n+1)/2</code>，拆开后得到：$n^2/2 + n/2$，最终时间复杂度为：$n^2$。</p><p><strong>总结 2：循环中，只需要挑选循环的一个基本操作分析它的执行次数与 n 的关系即可</strong></p><p><strong>总结 3：多层循环嵌套下，只需要关注最深层循环循环了几次！</strong></p><h3 id="_3-6-指数阶-o-2-n" tabindex="-1"><a class="header-anchor" href="#_3-6-指数阶-o-2-n"><span>3.6 指数阶 $O(2^n)$</span></a></h3><p>示例：斐波那契数列，后一项为前两项之和，如：0 1 1 2 3 5 8...，求第 n 项目。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 斐波那契数列递归算法</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fib</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">计算其时间复杂度: T(0) = 2,T(1) = 2，后面的 O(1) 表示其他运算</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">T(n) = T(n - 1) + T(n - 2) + O(1)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     = O(1.618 ^ n)     1.168是黄金分割，T(n) 约为 2^n</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">*/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然也有更直观的运算方式： $1+2+4+8 = 2^4-1$，即 $0.5*2^n-1$</p><p><img src="`+A+`" alt="斐波那契数列运算"></p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 递归算法其实都可以规划为循环，斐波那契数列还有下面的算法，不难发现其时间复杂度为 O(n)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fib2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> first </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> second </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> first </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> second;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        first </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> second;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        second </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> second;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-对数阶" tabindex="-1"><a class="header-anchor" href="#_3-7-对数阶"><span>3.7 对数阶</span></a></h3><p>首先理解中学数学中的对数。对数的运算其实是幂运算的逆运算，如下所示：</p><p>示例：<code>T(n) = lgn + 1</code>，执行次数是对数计算的</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">n</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 执行lgn次</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于每次 count 乘以 2 以后，距离 n 更近了一分，即有多少 2 相乘后大于 n，则会退出循环，$2^x=n$得到$x=log_2n$，其时间复杂度为：$O(log_2n)$，在编程中简写为：<code>O(log n)</code>。</p><h3 id="_3-8-旅行商问题" tabindex="-1"><a class="header-anchor" href="#_3-8-旅行商问题"><span>3.8 旅行商问题</span></a></h3><p>O(n!)的时间极长，主要用来解决计算机领域中的旅行商问题，其计算时间增加的异常快，且改进可能性较低。</p><p>示例：现在有一位旅行商，需要前往 5 个城市，而且要确保行程最短，那么就需要将 5 个城市的所有排序方式的长度和都计算一次，要执行 120 次操作，城市数目增加到 6 个时是 720 次，到了 7 个就要执行 5040 次！</p><p>那么到了 n 个城市，就要执行 n!(n 的阶乘)次操作才能计算出结果，所以运行时间为 O(n!)，也称为阶乘时间。</p><h3 id="_3-9-总结常见的时间复杂度" tabindex="-1"><a class="header-anchor" href="#_3-9-总结常见的时间复杂度"><span>3.9 总结常见的时间复杂度</span></a></h3><p><strong>常见的时间复杂度</strong>（从快到慢）：</p><table><thead><tr><th>执行次数</th><th>阶</th><th>非正式称呼</th><th>对应算法</th></tr></thead><tbody><tr><td>12</td><td>$O(1)$</td><td>常数阶</td><td>普通运算</td></tr><tr><td>$5log_2n+20$</td><td>$O(log_2n)$</td><td>对数阶</td><td>二分查找法</td></tr><tr><td>2n+3</td><td>$O(n)$</td><td>线性阶</td><td>简单查找</td></tr><tr><td>$5log_2n+2n$</td><td>$O(nlog_2n)$</td><td>O(nlogn)阶</td><td></td></tr><tr><td>$3n^2+2n+1$</td><td>$O(n^2)$</td><td>平方阶</td><td>选择排序</td></tr><tr><td>$5n<sup>3+3n</sup>2+2n+1$</td><td>$O(n^3)$</td><td>立方阶</td><td></td></tr><tr><td>$2^n$</td><td>$O(2^n)$</td><td>指数阶</td><td></td></tr><tr><td>n 阶乘</td><td>$O(n!)$</td><td>阶乘</td><td>旅行商问题</td></tr><tr><td>$n^n$</td><td>$O(n^n)$</td><td></td><td></td></tr></tbody></table><p>常用的时间复杂度顺序口诀——<strong>常对幂指阶</strong>：<br> $O(1)&lt;=O(log_2n)&lt;=O(n)&lt;=O(nlog_2n)&lt;=O(n<sup>2)&lt;=O(n</sup>3)&lt;=O(2<sup>n)&lt;=O(n!)&lt;O(n</sup>n)$</p><p><img src="`+g+`" alt="复杂度曲线图"></p><p>延伸：我们可以使用极限来比较复杂度的阶，如：</p><ul><li>$\\lim\\limits_{n\\rightarrow\\infty}\\frac{log_2n}{n} = 0$：意味着 n 趋于无穷大时，n 比$log_2n$变大的速度快的多</li><li>$\\lim\\limits_{n\\rightarrow\\infty}\\frac{n<sup>2}{2</sup>n} = 0$：意味着 n 趋于无穷大时，$n^2$ 比$2^n$变大的速度快的多</li></ul><h2 id="_4-空间复杂度计算" tabindex="-1"><a class="header-anchor" href="#_4-空间复杂度计算"><span>4. 空间复杂度计算</span></a></h2><h3 id="_4-1-空间复杂度的运算" tabindex="-1"><a class="header-anchor" href="#_4-1-空间复杂度的运算"><span>4.1 空间复杂度的运算</span></a></h3><p>空间复杂度的计算要注重 malloc、free 时动态分配的空间。假设一个递归函数：</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fact</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fact</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>递归使用了一个调用栈结构，每递归一层都要往调用栈中加入一个工作记录，工作记录为形式参数 n、函数返回值、返回地址，即 3 个存储单元，递归深度是 n，所需的空间就是 3n，空间复杂度就是 3n。</p><p>空间复杂度有以下几种情形：</p><ul><li>常量空间 $O(1)$：存储空间固定，与输入的规模无关</li><li>线性空间 $O(n)$：存储空间是一个线性集合如数组，集合大小与输入规模 n 成正比</li><li>二维空间 $O(n^2)$：分配的空间是一个二维数组集合，集合的长度、宽度与输入规模 n 成正比</li><li>递归空间 $O(n)$：计算机在运行递归代码时，会专门分配一块内存，存储方法调用栈，递归越深，入栈元素越多，到达结束条件时，方法出栈。执行递归操作所需要的内存空间和递归的深度成正比，纯粹递归操作的空间复杂度也是线性的，如果递归深度是 $n$，那么其空间复杂度就是 $O(n)$。</li></ul><div class="hint-container tip"><p class="hint-container-title">贴士</p><p>递归程序中，偶尔也会有不断递归下，每轮需要的空间是非线性的，比如每轮调用需要申请一个数组，只有数组的长度递减结束后才结束递归，则可能递归的空间复杂度就是 $O(n^2)$。</p></div>`,174)]))}const u=i(c,[["render",o]]),b=JSON.parse('{"path":"/go/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E8%BF%B0.html","title":"数据结构概述","lang":"zh-CN","frontmatter":{"title":"数据结构概述","date":"2024-04-10T00:00:00.000Z","category":["数据结构","go"],"tag":["数据结构","go"],"star":true,"sticky":true,"description":"Golang 数据结构、算法概述","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据结构概述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-04-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-12T01:04:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"悦·宝宝\\",\\"url\\":\\"https://github.com/Igarashi-G\\"}]}"],["meta",{"property":"og:url","content":"https://igarashi-g.github.io/go/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A6%82%E8%BF%B0.html"}],["meta",{"property":"og:site_name","content":"悦 ▪ 宝宝"}],["meta",{"property":"og:title","content":"数据结构概述"}],["meta",{"property":"og:description","content":"Golang 数据结构、算法概述"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-12T01:04:52.000Z"}],["meta",{"property":"article:tag","content":"go"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:published_time","content":"2024-04-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-12T01:04:52.000Z"}]]},"git":{"createdTime":1744419892000,"updatedTime":1744419892000,"contributors":[{"name":"Igarashi-G","username":"Igarashi-G","email":"2545369032@qq.com","commits":1,"url":"https://github.com/Igarashi-G"}]},"readingTime":{"minutes":23.62,"words":7087},"filePathRelative":"go/算法与数据结构/概述.md","excerpt":"<p><strong>Golang</strong> 数据结构、算法概述</p>\\n","autoDesc":true}');export{u as comp,b as data};
